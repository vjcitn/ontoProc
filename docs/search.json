[{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"ambitions collaborative single cell biology achieved coordinated efforts many groups, help clarify cell types dynamics array functional environmental contexts. use formal ontology pursuit well-motivated research progress already substantial. Bakken et al. (2017) discuss “strategies standardized cell type representations based data outputs [high-content flow cytometry single cell RNA sequencing], including ‘context annotations’ form standardized experiment metadata specimen source analyzed marker genes serve useful features machine learning-based cell type classification models.” Aevermann et al. (2018) describe FAIR principles can implemented using statistical identification necessary sufficient conditions determining cell class membership. propose Cell Ontology can transformed broadly usable knowledgebase incorporation accurate marker gene signatures cell classes. vignette, review key concepts tasks required make progress adoption application ontological discipline Bioconductor-oriented data analysis. ’ll start setting package attachments ontology objects.","code":"library(ontoProc) library(ontologyPlot) library(BiocStyle)  # for package references cl = getOnto(\"cellOnto\", \"2021\") # for continuity --    has_high_plasma_membrane_amount: list go = getOnto(\"goOnto\", \"2021\")  # if updated, some assertions will fail... pr = getOnto(\"Pronto\", \"2021\")  # important case change"},{"path":[]},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"owl-interface","dir":"Articles","previous_headings":"Scope of package","what":"OWL interface","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"1.99.0, facilities present import valid OWL ontology. use basilisk incorporate functionality owlready2 bioregisty. One way identifying large number ontologies available ingestion query bioregistry. can use URLs given table explore ontologies interest. example, AEO (anatomical entity ontology) extends CARO (common anatomy reference ontology). sorts terms regarded extensions?  CARO already using extensions. Use search facility owlready2 check UBERON ontology (check table references) terms involving substring ‘vein’: interesting note owlready2 includes ability provide relevance measurement search results using BM25 index. need add code capitalize ontoProc.","code":"br = bioregistry_ols_resources() library(DT) datatable(br[,c(2,3)]) aeo = owl2cache(url=\"http://purl.obolibrary.org/obo/aeo.owl\") # localize OWL ## resource BFC1057 already in cache from http://purl.obolibrary.org/obo/aeo.owl aeoinr = setup_entities2(aeo) set.seed(1234) suppressWarnings({ # zero-length angle onto_plot2(aeoinr, sample(grep(\"AEO\", names(aeoinr$name), value=TRUE),12)) }) ub = owl2cache(url=\"http://purl.obolibrary.org/obo/uberon.owl\") ## resource BFC1060 already in cache from http://purl.obolibrary.org/obo/uberon.owl allv = search_labels(ub, \"*vein*\") length(allv) ## [1] 362 head(unlist(allv)) ##                             UBERON_0001638  ##                                     \"vein\"  ##                                 CL_0002543  ##                    \"vein endothelial cell\"  ##                                 CL_0002588  ## \"smooth muscle cell of the umbilical vein\"  ##                             UBERON_0002066  ##                           \"umbilical vein\"  ##                                 CL_0002618  ##       \"endothelial cell of umbilical vein\"  ##                                 CL_0009094  ##  \"endothelial cell of hepatic portal vein\""},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"legacy-approaches","dir":"Articles","previous_headings":"Scope of package","what":"Legacy approaches","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"following table describes --date resources available getOnto. resources listed packDesc202x packDesc2019.","code":"data(packDesc2023) kable(packDesc2023[,-c(1,7)])"},{"path":[]},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"conceptual-overview-of-ontology-with-cell-types","dir":"Articles","previous_headings":"Methods","what":"Conceptual overview of ontology with cell types","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"Definitions, semantics. concreteness, provide definitions examples. use ontology denote systematic organization terminology used conceptual domain. Cell Ontology graphical data structure carefully annotated terms nodes conventionally defined semantic relationships among terms serving edges. example, lung ciliated cell URI . URI includes fixed-length identifier CL_1000271 unambiguous interpretation wherever encountered. chain relationships lung ciliated cell ciliated cell, native cell, cell, possessing URI related interpretive metadata. relationship connecting precise less precise term chain denoted SubclassOf. Ciliated cell equivalent native cell plasma membrane part cilium. Semantic characteristics terms relationships used infer relationships among terms may relations directly specified available ontologies. Barriers broad adoption. Given wealth material available biological ontologies, somewhat surprising formal annotation seldom used practice. Barriers common use ontology data annotation include: () Non-existence exact matching intended term terms available ontologies interest. (ii) practical problem decoding ontology identifiers. GO tag CL tag excellent programming, clumsy co-locate tag associated natural language term phrase. (iii) Likelihood disagreement suitability terms conditions observed boundaries knowledge. help cope first problems, Bioconductor’s ontologyProc package includes function liberalMap search ontology terms lexically close target term phrase. second problem can addressed elaborate data structures variable annotation programming R, third problem diminish importance value ontology adoption becomes manifest applications. Class vs. instance. important distinguish practice designing maintaining ontologies use ontological class terms annotate instances concepts. combination ontology set annotated instances called knowledge base. illustrate salient distinctions , consider cell line called A549, established human lung adenocarcinoma sample. mention A549 Cell Ontology. However, A549 present EBI Experimental Factor Ontology subclass “Homo sapiens cell line” class. Presumably A549 class cells widely used experimentally, cell line constitutes concept deserving mapping universe experimental factors. universe concepts related cell structure function per se, A549 individual can characterized possession lack properties enumerated Cell Ontology, deserving inclusion ontology.","code":""},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"illustration-in-a-single-cell-rna-seq-dataset","dir":"Articles","previous_headings":"Methods","what":"Illustration in a single-cell RNA-seq dataset","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"10X Genomics corporation distributed dataset results sequencing 10000 PBMC healthy donor . Subsets data used tutorials Seurat analytical suite (Butler et al. (2018)).","code":""},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"labeling-pbmc-in-the-seurat-tutorial","dir":"Articles","previous_headings":"Methods > Illustration in a single-cell RNA-seq dataset","what":"Labeling PBMC in the Seurat tutorial","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"One result tutorial analysis 3000 cell subset table cell types expression-based markers cell identity. first three columns table concluding material Seurat tutorial; remaining columns created “manual” matching Seurat terms terms found Cell Ontology.","code":"kable(stab <- seur3kTab())"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"relationships-asserted-in-the-cell-ontology","dir":"Articles","previous_headings":"Methods > Illustration in a single-cell RNA-seq dataset","what":"Relationships asserted in the Cell Ontology","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"Given informally selected tags table , can sketch Cell Ontology graph connecting associated cell types. ontoProc package adds functionality ontologyPlot make_graphNEL_from_ontology_plot. allows use Rgraphviz igraph visualization facilities graphs derived ontology structures. display PBMC cell sets reported Seurat tutorial.","code":"library(ontoProc) cl = getOnto(\"cellOnto\", \"2023\") onto_plot2(cl, stab$tag)"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"molecular-features-asserted-in-the-cell-ontology","dir":"Articles","previous_headings":"Methods > Illustration in a single-cell RNA-seq dataset","what":"Molecular features asserted in the Cell Ontology","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"CLfeats function traces relationships properties given Cell Ontology class. Briefly, class can assert intersection_of classes, has_part, lacks_part, has_plasma_membrane_part, lacks_plasma_membrane_part can asserted relationships holding cell type instances cell components. components often cross-referenced Protein Ontology Gene Ontology. Protein Ontology component synonym HGNC symbol provided, symbol retrieved CLfeats. obtain listing mature CD1a-positive dermal dendritic cell. ctmarks function starts shiny app generates tables sort selected cell types. ctmarks snapshot","code":"suppressMessages({ kable(CLfeats(cl, \"CL:0002531\", pr=pr, go=go)) })"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"mapping-from-gene-presencerole-to-cell-type","dir":"Articles","previous_headings":"Methods > Illustration in a single-cell RNA-seq dataset","what":"Mapping from gene ‘presence/role’ to cell type","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"sym2CellOnto function helps find mention given gene symbols properties parts cell types.","code":"kable(sdf <- as.data.frame(sym2CellOnto(\"ITGAM\", cl, pr))) table(sdf$cond) ##  ## lacksPMP  ##       22 kable(as.data.frame(sym2CellOnto(\"FOXP3\", cl, pr)))"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"adding-terms-to-ontology_index-structures-to-extend-cell-ontology","dir":"Articles","previous_headings":"Methods","what":"Adding terms to ontology_index structures to ‘extend’ Cell Ontology","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"task extending ontology partly bureaucratic nature depends collection endorsements updates centralized information structures. order permit experimentation interfaces new content may quite speculative, include approach combining new ontology ‘terms’ structure similar endorsed Cell Ontology, ontologyIndex-based ontology_index instances.","code":""},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"use-case-a-set-of-cell-types-defined-by-diagonal-expression","dir":"Articles","previous_headings":"Methods > Adding terms to ontology_index structures to ‘extend’ Cell Ontology","what":"Use case: a set of cell types defined by “diagonal expression”","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"demonstration, consider discussion Bakken et al. (2017), ‘diagonal’ expression pattern defining group novel cell types. set genes identified cells distinguised expressing exactly one gene set. Diagonal expression pattern. necessary information collected vector. vector set genes, name element tag associated type cell expresses gene express gene set.","code":"sigels = c(\"CL:X01\"=\"GRIK3\", \"CL:X02\"=\"NTNG1\", \"CL:X03\"=\"BAGE2\",              \"CL:X04\"=\"MC4R\", \"CL:X05\"=\"PAX6\", \"CL:X06\"=\"TSPAN12\",               \"CL:X07\"=\"hSHISA8\", \"CL:X08\"=\"SNCG\", \"CL:X09\"=\"ARHGEF28\",               \"CL:X10\"=\"EGF\")"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"a-data-frame-defining-the-cell-types-and-their-properties","dir":"Articles","previous_headings":"Methods > Adding terms to ontology_index structures to ‘extend’ Cell Ontology","what":"A data.frame defining the cell types and their properties","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"cyclicSigset function produces data.frame instance connecting cell types genes expressed unexpressed. expected tabular layout like suffice handle general situations cell type definition.","code":"cs = cyclicSigset(sigels) dim(cs) ## [1] 100   3 cs[c(1:5,9:13),] ##        gene   type     cond ## 1  ARHGEF28 CL:X09   hasExp ## 2     GRIK3 CL:X09 lacksExp ## 3     NTNG1 CL:X09 lacksExp ## 4     BAGE2 CL:X09 lacksExp ## 5      MC4R CL:X09 lacksExp ## 9      SNCG CL:X09 lacksExp ## 10      EGF CL:X09 lacksExp ## 11    BAGE2 CL:X03   hasExp ## 12    GRIK3 CL:X03 lacksExp ## 13    NTNG1 CL:X03 lacksExp table(cs$cond) ##  ##   hasExp lacksExp  ##       10       90"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"translating-the-data-frame-elements-to-obo-term-instances","dir":"Articles","previous_headings":"Methods > Adding terms to ontology_index structures to ‘extend’ Cell Ontology","what":"Translating the data.frame elements to OBO Term instances","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"complicated aspect novel OBO term construction proper specifications relationships existing ontology components. prolog mostly shared terms generated programmatically diagonal pattern task. ldfToTerms API uses create set strings can parsed term. content tms can appended content Cell Ontology cl.obo text import ontologyIndex::get_OBO.","code":"makeIntnProlog = function(id, ...) {  # make type-specific prologs as key-value pairs      c(          sprintf(\"id: %s\", id),        sprintf(\"name: %s-expressing cortical layer 1 interneuron, human\", ...),        sprintf(\"def: '%s-expressing cortical layer 1 interneuron, human described via RNA-seq observations' [PMID 29322913]\", ...),        \"is_a: CL:0000099 ! interneuron\",        \"intersection_of: CL:0000099 ! interneuron\")  } pmap = c(\"hasExp\"=\"has_expression_of\", lacksExp=\"lacks_expression_of\") head(unlist(tms <- ldfToTerms(cs, pmap, sigels, makeIntnProlog)), 20) ##  [1] \"[Term]\"                                                                                                         ##  [2] \"id: CL:X01\"                                                                                                     ##  [3] \"name: GRIK3-expressing cortical layer 1 interneuron, human\"                                                     ##  [4] \"def: 'GRIK3-expressing cortical layer 1 interneuron, human described via RNA-seq observations' [PMID 29322913]\" ##  [5] \"is_a: CL:0000099 ! interneuron\"                                                                                 ##  [6] \"intersection_of: CL:0000099 ! interneuron\"                                                                      ##  [7] \"has_expression_of: PR:000008242 ! GRIK3\"                                                                        ##  [8] \"lacks_expression_of: PR:000011467 ! NTNG1\"                                                                      ##  [9] \"lacks_expression_of: PR:000004625 ! BAGE2\"                                                                      ## [10] \"lacks_expression_of: PR:000001237 ! MC4R\"                                                                       ## [11] \"lacks_expression_of: PR:000012318 ! PAX6\"                                                                       ## [12] \"lacks_expression_of: PR:000016738 ! TSPAN12\"                                                                    ## [13] \"lacks_expression_of: PR:B8ZZ34 ! hSHISA8\"                                                                       ## [14] \"lacks_expression_of: PR:000015325 ! SNCG\"                                                                       ## [15] \"lacks_expression_of: PR:000013942 ! ARHGEF28\"                                                                   ## [16] \"lacks_expression_of: PR:000006928 ! EGF\"                                                                        ## [17] \"[Term]\"                                                                                                         ## [18] \"id: CL:X02\"                                                                                                     ## [19] \"name: NTNG1-expressing cortical layer 1 interneuron, human\"                                                     ## [20] \"def: 'NTNG1-expressing cortical layer 1 interneuron, human described via RNA-seq observations' [PMID 29322913]\""},{"path":[]},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"a-data-frame-mapping-from-informal-to-formal-terms","dir":"Articles","previous_headings":"Methods > Subsetting SingleR resources using ontological mapping","what":"A data.frame mapping from informal to formal terms","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"Aaron Lun produced mapping informal terms used Human Primary Cell Atlas Cell Ontology tags. provisionally include copy mapping ontoProc: rename columns map convenience bind_formal_tags method.","code":"hpca_map = read.csv(system.file(\"extdata/hpca.csv\", package=\"ontoProc\"), strings=FALSE) head(hpca_map) ##                          uncontrolled controlled ## 1        DC:monocyte-derived:immature CL:0000840 ## 2      DC:monocyte-derived:Galectin-1 CL:0000451 ## 3             DC:monocyte-derived:LPS CL:0000451 ## 4                 DC:monocyte-derived CL:0000451 ## 5 Smooth_muscle_cells:bronchial:vit_D CL:0002598 ## 6       Smooth_muscle_cells:bronchial CL:0002598 names(hpca_map) = c(\"informal\", \"formal\")  # obligatory for now"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"binding-formal-tags-to-the-hpca-data","dir":"Articles","previous_headings":"Methods > Subsetting SingleR resources using ontological mapping","what":"Binding formal tags to the HPCA data","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"turning code now standard approach getting mapping SummarizedExperment yet. SingleR merges ‘standardized’ branch, come back. Let’s retrieve HPCA data SingleR: Now bind formal tags: don’t check failed mappings:","code":"library(SummarizedExperiment) library(SingleCellExperiment) library(celldex) hpca_sce = HumanPrimaryCellAtlasData() hpca_sce = bind_formal_tags(hpca_sce, \"label.fine\", hpca_map) length(unique(hpca_sce$label.ont)) ## [1] 66 length(xx <- which(is.na(hpca_sce$label.ont))) ## [1] 2 if (length(xx)>0) print(colData(hpca_sce)[xx,]) ## DataFrame with 2 rows and 3 columns ##            label.main             label.fine   label.ont ##           <character>            <character> <character> ## GSM154081     T_cells T_cell:CCR10+CLA+1,2..          NA ## GSM154084     T_cells T_cell:CCR10-CLA+1,2..          NA sum(hpca_sce$label.ont == \"\", na.rm=TRUE) # iPS and BM ## [1] 50"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"subsetting-using-the-class-hierarchy-of-cell-ontology","dir":"Articles","previous_headings":"Methods > Subsetting SingleR resources using ontological mapping","what":"Subsetting using the class hierarchy of Cell Ontology","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"","code":"cell_onto = ontoProc::getOnto(\"cellOnto\", \"2023\") ## loading from cache hpca_mono = subset_descendants( hpca_sce, cell_onto, \"^monocyte$\" ) table(hpca_mono$label.fine) ##  ##                          Monocyte             Monocyte:anti-FcgRIIB  ##                                27                                 2  ##                    Monocyte:CD14+                    Monocyte:CD16-  ##                                 3                                 7  ##                    Monocyte:CD16+                    Monocyte:CXCL4  ##                                 6                                 2  ##   Monocyte:F._tularensis_novicida           Monocyte:leukotriene_D4  ##                                 6                                 4  ##                     Monocyte:MCSF Monocyte:S._typhimurium_flagellin  ##                                 2                                 1 table(hpca_mono$label.ont) # not much diversity ##  ## CL:0000576 CL:0001054  ##         57          3 hpca_tcell = subset_descendants( hpca_sce, cell_onto, \"^T cell$\" ) table(hpca_tcell$label.fine) ##  ##                    T_cell:CD4+     T_cell:CD4+_central_memory  ##                             12                              5  ##    T_cell:CD4+_effector_memory              T_cell:CD4+_Naive  ##                              4                              6  ##                    T_cell:CD8+     T_cell:CD8+_Central_memory  ##                             16                              3  ##    T_cell:CD8+_effector_memory T_cell:CD8+_effector_memory_RA  ##                              4                              4  ##              T_cell:CD8+_naive                T_cell:effector  ##                              4                              4  ##             T_cell:gamma-delta              T_cell:Treg:Naive  ##                              2                              2 table(hpca_tcell$label.ont) # ##  ## CL:0000624 CL:0000625 CL:0000798 CL:0000895 CL:0000900 CL:0000904 CL:0000905  ##         12         16          2          6          4          5          4  ## CL:0000907 CL:0000911 CL:0000913 CL:0001062 CL:0002677  ##          3          4          4          4          2 uu = unique(hpca_tcell$label.ont) onto_plot2(cell_onto, uu)"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"disease-concept-relationships","dir":"Articles","previous_headings":"","what":"Disease concept relationships","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"Experimental Factor Ontology available integrates information among diverse ontologies. check terms likely related asthma.  However, Human Disease Ontology seems developed terms defining asthma subtypes. integrated ontology ontoProc yet, can retrieved conveniently follows: resource, can see finer-grained handling asthma subtyping:","code":"ef = getOnto(\"efoOnto\") ## loading from cache alla <- grep(\"sthma\", ef$name, value=TRUE)  aa <- grep(\"obso\", alla, invert=TRUE, value=TRUE) onto_plot2(ef, names(aa)) hdo_2022_09 = get_OBO(   \"https://github.com/DiseaseOntology/HumanDiseaseOntology/raw/main/src/ontology/HumanDO.obo\",    extract_tags = \"everything\"   )"},{"path":"https://github.com/vjcitn/ontoProc/articles/ontoProc.html","id":"related-tools","dir":"Articles","previous_headings":"","what":"Related tools","title":"ontoProc: Ontology interfaces for Bioconductor, with focus on cell type identification","text":"Inference identities cells assayed single cell transcriptomics experiment can performed using Bioconductor celaref package. package includes number reference data resources providing whole-transcriptome profiles cells known unknown type. approach systematically structuring data cell-type signatures, conducting inference cell types new experiments, provided Hancock package, development. CRAN package useful R programming ontologies ontologyIndex Westbury et al. (2015). provides easily used functions parsing ontologies OBO format performing basic queries text fields list structures.","code":""},{"path":[]},{"path":"https://github.com/vjcitn/ontoProc/articles/owlents.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"owlents: using OWL directly in ontoProc","text":"Bioconductor 3.19, ontoProc can work OWL RDF/XML serializations ontologies, via owlready2 python modules. owl2cache function retrieves OWL URL file places cache avoid repetitious retrievals. default cache one defined BiocFileCache::BiocFileCache(). work cell ontology. setup_entities2 use basilisk acquire owlready2 python modules parse OWL produce ontology_index instance (defined CRAN package ontologyIndex). usual plotting approach works.","code":"library(ontoProc) clont_path = owl2cache(url=\"http://purl.obolibrary.org/obo/cl.owl\") cle = setup_entities2(clont_path) cle ## Ontology with 16430 terms ##  ## Properties: ##  id: character ##  name: character ##  parents: list ##  children: list ##  ancestors: list ##  obsolete: logical ## Roots: ##  BFO_0000003 - NA ##  BFO_0000002 - NA ##  BFO_0000004 - NA ##  GO_0050878 - regulation of body fluid levels ##  BFO_0000040 - NA ##  GO_0010817 - regulation of hormone levels ##  BFO_0000015 - NA ##  UBERON_0001062 - anatomical entity ##  UBERON_0000000 - processual entity ##  BFO_0000020 - NA ##  ... 400 more sel = c(\"CL_0000492\", \"CL_0001054\", \"CL_0000236\",  \"CL_0000625\", \"CL_0000576\",  \"CL_0000623\", \"CL_0000451\", \"CL_0000556\") onto_plot2(cle, sel)"},{"path":"https://github.com/vjcitn/ontoProc/articles/owlents.html","id":"illustration-with-human-phenotype-ontology","dir":"Articles","previous_headings":"","what":"Illustration with Human Phenotype ontology","title":"owlents: using OWL directly in ontoProc","text":"’ll obtain ad hoc selection 15 UBERON term names visualize hierarchy.  prefixes class names ontology give sense scope. characterize human phenotypes ontologically, CL, GO, CHEBI, UBERON play significant roles.","code":"hpont_path = owl2cache(url=\"http://purl.obolibrary.org/obo/hp.owl\") ## resource BFC1019 already in cache from http://purl.obolibrary.org/obo/hp.owl hpents = setup_entities2(hpont_path) kp = grep(\"UBER\", names(hpents$name), value=TRUE)[21:30] onto_plot2(hpents, kp) t(t(table(sapply(strsplit(names(hpents$name), \"_\"), \"[\", 1)))) ##          ##          [,1]  ##   BFO       14 ##   CHEBI   1595 ##   CL      1142 ##   GO      2679 ##   HP     18252 ##   HsapDv    12 ##   MPATH     75 ##   NBO      143 ##   PATO     567 ##   PR       205 ##   RO         1 ##   UBERON  5602"},{"path":"https://github.com/vjcitn/ontoProc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincent Carey. Contributor, maintainer. Sara Stankiewicz. Contributor.","code":""},{"path":"https://github.com/vjcitn/ontoProc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carey V (2024). ontoProc: processing ontologies anatomy, cell lines, . R package version 1.99.4, https://github.com/vjcitn/ontoProc.","code":"@Manual{,   title = {ontoProc: processing of ontologies of anatomy, cell lines, and so on},   author = {Vincent Carey},   year = {2024},   note = {R package version 1.99.4},   url = {https://github.com/vjcitn/ontoProc}, }"},{"path":"https://github.com/vjcitn/ontoProc/reference/CLfeats.html","id":null,"dir":"Reference","previous_headings":"","what":"produce a data.frame of features relevant to a Cell Ontology class — CLfeats","title":"produce a data.frame of features relevant to a Cell Ontology class — CLfeats","text":"produce data.frame features relevant Cell Ontology class","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/CLfeats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"produce a data.frame of features relevant to a Cell Ontology class — CLfeats","text":"","code":"CLfeats(ont, tag = \"CL:0001054\", pr, go)"},{"path":"https://github.com/vjcitn/ontoProc/reference/CLfeats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"produce a data.frame of features relevant to a Cell Ontology class — CLfeats","text":"ont instance ontologyIndex ontology tag character(1) CL: class tag pr instance ontologyIndex PRO protein ontology go instance ontologyIndex GO gene ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/CLfeats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"produce a data.frame of features relevant to a Cell Ontology class — CLfeats","text":"data.frame instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/CLfeats.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"produce a data.frame of features relevant to a Cell Ontology class — CLfeats","text":"function look intersection_of has_part, lacks_part components CL entry find properties asserted inherited cell type identified 'tag'.  1.19, function look global environment ontologies. use 2021 versions examples changes ontologies omit important relationships; revisions package code 1.19.4 attempt address .","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/CLfeats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"produce a data.frame of features relevant to a Cell Ontology class — CLfeats","text":"","code":"cl = getOnto(\"cellOnto\", year_added=\"2021\") #> loading from cache pr = getOnto(\"Pronto\", \"2021\")  # legacy tag, for 2022 would be PROnto #> loading from cache go = getOnto(\"goOnto\", \"2021\") #> loading from cache CLfeats(cl, tag=\"CL:0001054\", pr=pr, go=go) #> no recognized predicate references for CL:0000576 #> no recognized predicate references for CL:0000766 #> no recognized predicate references for CL:0000738 #> no recognized predicate references for CL:0000988 #> no recognized predicate references for CL:0000219 #> no recognized predicate references for CL:0000003 #>          tag        prtag     cond #> 1 CL:0001054 PR:000001002 lacksPMP #> 2 CL:0001054 PR:000001020 lacksPMP #> 3 CL:0001054 PR:000001289 lacksPMP #> 4 CL:0000000   GO:0005634  hasPart #> 5 CL:0000000   GO:0005634  hasPart #>                                             entity SYMBOL #> 1                                    CD19 molecule   CD19 #> 2                                      CD3 epsilon   CD3E #> 3 membrane-spanning 4-domains subfamily A member 1  MS4A1 #> 4                                          nucleus   <NA> #> 5                                          nucleus   <NA> #>                     name #> 1 CD14-positive monocyte #> 2 CD14-positive monocyte #> 3 CD14-positive monocyte #> 4                   cell #> 5                   cell"},{"path":"https://github.com/vjcitn/ontoProc/reference/PROSYM.html","id":null,"dir":"Reference","previous_headings":"","what":"PROSYM: HGNC symbol synonyms for PR (protein ontology) entries identified in Cell Ontology — PROSYM","title":"PROSYM: HGNC symbol synonyms for PR (protein ontology) entries identified in Cell Ontology — PROSYM","text":"PROSYM: HGNC symbol synonyms PR (protein ontology) entries identified Cell Ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/PROSYM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PROSYM: HGNC symbol synonyms for PR (protein ontology) entries identified in Cell Ontology — PROSYM","text":"","code":"PROSYM"},{"path":"https://github.com/vjcitn/ontoProc/reference/PROSYM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PROSYM: HGNC symbol synonyms for PR (protein ontology) entries identified in Cell Ontology — PROSYM","text":"data.frame instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/PROSYM.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PROSYM: HGNC symbol synonyms for PR (protein ontology) entries identified in Cell Ontology — PROSYM","text":"OBO Foundry","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/PROSYM.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"PROSYM: HGNC symbol synonyms for PR (protein ontology) entries identified in Cell Ontology — PROSYM","text":"snapshot synonyms component extract_tags='everything' import PR. 'EXACT.*PRO-short.*:DNx' pattern used retrieve HGNC symbols. See ?getPROnto provenance information.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/PROSYM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PROSYM: HGNC symbol synonyms for PR (protein ontology) entries identified in Cell Ontology — PROSYM","text":"","code":"data(PROSYM) head(PROSYM) #>           PRID SYMBOL #> 1 PR:000000005 TGFBR2 #> 2 PR:000000009  AMHR2 #> 3 PR:000000010   CHRD #> 4 PR:000000015    FST #> 5 PR:000000017   IFNG #> 6 PR:000000021    NOG"},{"path":"https://github.com/vjcitn/ontoProc/reference/TermSet-class.html","id":null,"dir":"Reference","previous_headings":"","what":"manage ontological data with tags and a DataFrame instance — TermSet-class","title":"manage ontological data with tags and a DataFrame instance — TermSet-class","text":"manage ontological data tags DataFrame instance abbreviated display TermSet instances","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/TermSet-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"manage ontological data with tags and a DataFrame instance — TermSet-class","text":"","code":"# S4 method for class 'TermSet' show(object)"},{"path":"https://github.com/vjcitn/ontoProc/reference/TermSet-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"manage ontological data with tags and a DataFrame instance — TermSet-class","text":"object instance TermSet class","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/TermSet-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"manage ontological data with tags and a DataFrame instance — TermSet-class","text":"instance TermSet","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/TermSet-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"manage ontological data with tags and a DataFrame instance — TermSet-class","text":"","code":"efoOnto = getOnto(\"efoOnto\") #> loading from cache defsibs = siblings_TAG(\"EFO:1001209\", efoOnto) class(defsibs) #> [1] \"TermSet\" #> attr(,\"package\") #> [1] \"ontoProc\" defsibs #> TermSet for 16 terms #> AA amyloidosis, AL amyloidosis, ..., systemic scleroderma, thromboangiitis obliterans"},{"path":"https://github.com/vjcitn/ontoProc/reference/allGOterms.html","id":null,"dir":"Reference","previous_headings":"","what":"allGOterms: data.frame with ids and terms — allGOterms","title":"allGOterms: data.frame with ids and terms — allGOterms","text":"allGOterms: data.frame ids terms","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/allGOterms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"allGOterms: data.frame with ids and terms — allGOterms","text":"","code":"allGOterms"},{"path":"https://github.com/vjcitn/ontoProc/reference/allGOterms.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"allGOterms: data.frame with ids and terms — allGOterms","text":"data.frame instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/allGOterms.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"allGOterms: data.frame with ids and terms — allGOterms","text":"snapshot terms available GO.db (3.4.2), August 2017, using keys(GO.db, keytype=\"TERM\").","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/allGOterms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"allGOterms: data.frame with ids and terms — allGOterms","text":"","code":"data(allGOterms) head(allGOterms) #>         GOID                                                         TERM #> 1 GO:0000001                                    mitochondrion inheritance #> 2 GO:0000002                             mitochondrial genome maintenance #> 3 GO:0000003                                                 reproduction #> 4 GO:0000006 high-affinity zinc uptake transmembrane transporter activity #> 5 GO:0000007     low-affinity zinc ion transmembrane transporter activity #> 6 GO:0000009                       alpha-1,6-mannosyltransferase activity"},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve ancestor 'sets' — ancestors","title":"retrieve ancestor 'sets' — ancestors","text":"retrieve ancestor 'sets'","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve ancestor 'sets' — ancestors","text":"","code":"ancestors(oe)"},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve ancestor 'sets' — ancestors","text":"oe owlents instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve ancestor 'sets' — ancestors","text":"list sets","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve ancestor 'sets' — ancestors","text":"","code":"pa = get_ordo_owl_path() o2 = try(reticulate::import(\"owlready2\"), silent=TRUE) if (!inherits(o2, \"try-error\")) {  orde = setup_entities(pa)  orde  ancestors(orde[1:5])  labels(orde[1:5]) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors_names.html","id":null,"dir":"Reference","previous_headings":"","what":"obtain list of names of a set of ancestors — ancestors_names","title":"obtain list of names of a set of ancestors — ancestors_names","text":"obtain list names set ancestors","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obtain list of names of a set of ancestors — ancestors_names","text":"","code":"ancestors_names(anclist)"},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"obtain list of names of a set of ancestors — ancestors_names","text":"anclist output `ancestors`","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obtain list of names of a set of ancestors — ancestors_names","text":"list vectors character()","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors_names.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"obtain list of names of a set of ancestors — ancestors_names","text":"non-entities removed names extracted","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ancestors_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obtain list of names of a set of ancestors — ancestors_names","text":"","code":"pa = get_ordo_owl_path() o2 = try(reticulate::import(\"owlready2\"), silent=TRUE) if (!inherits(o2, \"try-error\")) {  orde = setup_entities(pa)  al = ancestors(orde[1001:1002])  ancestors_names(al) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/bind_formal_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"add mapping from informal to formal cell type tags to a SummarizedExperiment colData — bind_formal_tags","title":"add mapping from informal to formal cell type tags to a SummarizedExperiment colData — bind_formal_tags","text":"add mapping informal formal cell type tags SummarizedExperiment colData","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/bind_formal_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add mapping from informal to formal cell type tags to a SummarizedExperiment colData — bind_formal_tags","text":"","code":"bind_formal_tags(se, informal, tagmap, force = FALSE)"},{"path":"https://github.com/vjcitn/ontoProc/reference/bind_formal_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add mapping from informal to formal cell type tags to a SummarizedExperiment colData — bind_formal_tags","text":"se SummarizedExperiment instance informal character(1) name colData element uncontrolled vocabulary tagmap data.frame columns 'informal' 'formal' force logical(1), defaults FALSE; TRUE, allows clobbering existing colData variable named \"formal\"","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/bind_formal_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add mapping from informal to formal cell type tags to a SummarizedExperiment colData — bind_formal_tags","text":"SummarizedExperiment instance new colData column 'label.ont' giving formal tags associated sample","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/bind_formal_tags.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"add mapping from informal to formal cell type tags to a SummarizedExperiment colData — bind_formal_tags","text":"function fail value `informal` among colData variable names, \"formal\" among colData variable names.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/bioregistry_ols_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"produce bioregistry_ols table — bioregistry_ols_resources","title":"produce bioregistry_ols table — bioregistry_ols_resources","text":"produce bioregistry_ols table","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/bioregistry_ols_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"produce bioregistry_ols table — bioregistry_ols_resources","text":"","code":"bioregistry_ols_resources()"},{"path":"https://github.com/vjcitn/ontoProc/reference/bioregistry_ols_resources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"produce bioregistry_ols table — bioregistry_ols_resources","text":"data.frame","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/bioregistry_ols_resources.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"produce bioregistry_ols table — bioregistry_ols_resources","text":"uses `resources` method bioregistry module pip isolate resources non-null `ols` component.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/bioregistry_ols_resources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"produce bioregistry_ols table — bioregistry_ols_resources","text":"","code":"tab = bioregistry_ols_resources() head(tab[,1:3]) #>   contact #> 1    <NA> #> 2    <NA> #> 3    <NA> #> 4    <NA> #> 5    <NA> #> 6    <NA> #>                                                                                                                                                                                                                                                                                                                                                                              description #> 1 Alzheimer's Disease Ontology is a knowledge-based ontology that encompasses varieties of concepts related to Alzheimer'S Disease, foundamentally structured by upper level Basic Formal Ontology(BFO). This Ontology is enriched by the interrelational entities that demonstrate the nextwork of the understanding on Alzheimer's disease and can be readily applied for text mining. #> 2                                                                                                                                                                                                                                                                                   AEO is an ontology of anatomical structures that expands CARO, the Common Anatomy Reference Ontology #> 3                                                                                                                                                                                                        The Adverse Event Reporting Ontology (AERO) is an ontology aimed at supporting clinicians at the time of data entry, increasing quality and accuracy of reported adverse events #> 4                                                                                                                                                                                                                                                                                                                                                        Allotrope Merged Ontology Suite #> 5                                                                                                                                                                                                                                                                                    AgrO is an ontlogy for representing agronomic practices, techniques, variables and related entities #> 6                                                                                                                                                  The ontology for the Anatomy of the Insect SkeletoMuscular system (AISM) contains terms used to describe the cuticle - as a single anatomical structure - and the skeletal muscle system, to be used in insect biodiversity research. #>                              download_owl #> 1  http://purl.obolibrary.org/obo/ado.owl #> 2  http://purl.obolibrary.org/obo/aeo.owl #> 3                                    <NA> #> 4                                    <NA> #> 5 http://purl.obolibrary.org/obo/agro.owl #> 6 http://purl.obolibrary.org/obo/aism.owl"},{"path":"https://github.com/vjcitn/ontoProc/reference/c-TermSet-method.html","id":null,"dir":"Reference","previous_headings":"","what":"combine TermSet instances — c,TermSet-method","title":"combine TermSet instances — c,TermSet-method","text":"combine TermSet instances","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/c-TermSet-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"combine TermSet instances — c,TermSet-method","text":"","code":"# S4 method for class 'TermSet' c(x, ...)"},{"path":"https://github.com/vjcitn/ontoProc/reference/c-TermSet-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"combine TermSet instances — c,TermSet-method","text":"x TermSet instance ... additional instances","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/c-TermSet-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"combine TermSet instances — c,TermSet-method","text":"TermSet instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cellTypeToGO.html","id":null,"dir":"Reference","previous_headings":"","what":"utilities for approximate matching of cell type terms to GO categories and annotations — cellTypeToGO","title":"utilities for approximate matching of cell type terms to GO categories and annotations — cellTypeToGO","text":"utilities approximate matching cell type terms GO categories annotations","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cellTypeToGO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"utilities for approximate matching of cell type terms to GO categories and annotations — cellTypeToGO","text":"","code":"cellTypeToGO(celltypeString, gotab, ...)  cellTypeToGenes(   celltypeString,   gotab,   orgDb,   cols = c(\"ENSEMBL\", \"SYMBOL\"),   ... )"},{"path":"https://github.com/vjcitn/ontoProc/reference/cellTypeToGO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"utilities for approximate matching of cell type terms to GO categories and annotations — cellTypeToGO","text":"celltypeString character atom used search GO terms using gotab data.frame columns GO (goids) TERM (term strings) agrep ... additional arguments agrep orgDb instances orgDb cols columns retrieved select operation","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cellTypeToGO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"utilities for approximate matching of cell type terms to GO categories and annotations — cellTypeToGO","text":"data.frame data.frame","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cellTypeToGO.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"utilities for approximate matching of cell type terms to GO categories and annotations — cellTypeToGO","text":"primitive, uses agrep try find relevant terms.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cellTypeToGO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"utilities for approximate matching of cell type terms to GO categories and annotations — cellTypeToGO","text":"","code":"library(org.Hs.eg.db) #> Loading required package: AnnotationDbi #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, table, tapply, #>     union, unique, unsplit, which.max, which.min #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #> Loading required package: IRanges #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #>  data(allGOterms) head(cellTypeToGO(\"serotonergic neuron\", allGOterms)) #>             GOID                                        TERM #> 18623 GO:0036515           serotonergic neuron axon guidance #> 18625 GO:0036517 chemoattraction of serotonergic neuron axon #> 18627 GO:0036519  chemorepulsion of serotonergic neuron axon head(cellTypeToGenes(\"serotonergic neuron\", allGOterms, org.Hs.eg.db)) #> 'select()' returned 1:many mapping between keys and columns #>           GO EVIDENCE ONTOLOGY         ENSEMBL  SYMBOL #> 1 GO:0036515      ISS       BP ENSG00000008300  CELSR3 #> 2 GO:0036515      ISS       BP ENSG00000104290    FZD3 #> 3 GO:0036515      IEA       BP ENSG00000243232 PCDHAC2 #> 4 GO:0036515      IEA       BP ENSG00000291668 PCDHAC2 #> 5 GO:0036515      ISS       BP ENSG00000162738  VANGL2 #> 6 GO:0036517      ISS       BP ENSG00000114251   WNT5A"},{"path":"https://github.com/vjcitn/ontoProc/reference/children_names.html","id":null,"dir":"Reference","previous_headings":"","what":"obtain list of names of a set of subclasses/children — children_names","title":"obtain list of names of a set of subclasses/children — children_names","text":"obtain list names set subclasses/children","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/children_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obtain list of names of a set of subclasses/children — children_names","text":"","code":"children_names(sclist)"},{"path":"https://github.com/vjcitn/ontoProc/reference/children_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"obtain list of names of a set of subclasses/children — children_names","text":"sclist output `subclasses`","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/children_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obtain list of names of a set of subclasses/children — children_names","text":"list vectors character()","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/children_names.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"obtain list of names of a set of subclasses/children — children_names","text":"non-entities removed names extracted","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/children_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obtain list of names of a set of subclasses/children — children_names","text":"","code":"pa = get_ordo_owl_path() o2 = try(reticulate::import(\"owlready2\"), silent=TRUE) if (!inherits(o2, \"try-error\")) {  orde = setup_entities(pa)  al = subclasses(orde[100:120])  children_names(al) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/cleanCLOnames.html","id":null,"dir":"Reference","previous_headings":"","what":"obtain named character vector of terms from Cell Line Ontology, omitting obsolete and trailing 'cell' — cleanCLOnames","title":"obtain named character vector of terms from Cell Line Ontology, omitting obsolete and trailing 'cell' — cleanCLOnames","text":"obtain named character vector terms Cell Line Ontology, omitting obsolete trailing 'cell'","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cleanCLOnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obtain named character vector of terms from Cell Line Ontology, omitting obsolete and trailing 'cell' — cleanCLOnames","text":"","code":"cleanCLOnames()"},{"path":"https://github.com/vjcitn/ontoProc/reference/cleanCLOnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obtain named character vector of terms from Cell Line Ontology, omitting obsolete and trailing 'cell' — cleanCLOnames","text":"character()","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cleanCLOnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obtain named character vector of terms from Cell Line Ontology, omitting obsolete and trailing 'cell' — cleanCLOnames","text":"","code":"cleanCLOnames()[1:10] #> loading from cache #>                         BFO:0000001                         BFO:0000002  #>                            \"entity\"                        \"continuant\"  #>                         BFO:0000003                         BFO:0000004  #>                         \"occurrent\"            \"independent continuant\"  #>                         BFO:0000006                         BFO:0000015  #>                    \"spatial region\"                           \"process\"  #>                         BFO:0000016                         BFO:0000017  #>                       \"disposition\"                 \"realizable entity\"  #>                         BFO:0000019                         BFO:0000020  #>                           \"quality\" \"specifically dependent continuant\""},{"path":"https://github.com/vjcitn/ontoProc/reference/common_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"list and count samples with common ontological annotation in two SEs — common_classes","title":"list and count samples with common ontological annotation in two SEs — common_classes","text":"list count samples common ontological annotation two SEs","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/common_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list and count samples with common ontological annotation in two SEs — common_classes","text":"","code":"common_classes(ont, se1, se2)"},{"path":"https://github.com/vjcitn/ontoProc/reference/common_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list and count samples with common ontological annotation in two SEs — common_classes","text":"ont instance ontologyIndex ontology se1 SummarizedExperiment using `label.ont` colData provide ontological tags (`ont`) samples se2 SummarizedExperiment using `label.ont` colData provide ontological tags (`ont`) samples","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/common_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list and count samples with common ontological annotation in two SEs — common_classes","text":"data.frame rownames given common tags, class names column `clname`, counts samples bearing given tags remaining columns.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/common_classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"list and count samples with common ontological annotation in two SEs — common_classes","text":"","code":"if (requireNamespace(\"celldex\")) {   imm = celldex::ImmGenData()   if (\"label.ont\" %in% names(SummarizedExperiment::colData(imm))) {     cl = getOnto(\"cellOnto\")     blu = celldex::BlueprintEncodeData()     common_classes( cl, imm, blu )     }   } #> Loading required namespace: celldex #> loading from cache #>                                               clname imm blu #> CL:0000235                                macrophage  76  18 #> CL:0000576                                  monocyte  10  16 #> CL:0000787                             memory B cell   2   1 #> CL:0000771                                eosinophil   4   1 #> CL:0000057                                fibroblast  21  20 #> CL:0000775                                neutrophil  23  23 #> CL:0000115                          endothelial cell  20  18 #> CL:0000624           CD4-positive, alpha-beta T cell  41  11 #> CL:0000625           CD8-positive, alpha-beta T cell  17   3 #> CL:0000066                           epithelial cell  25  18 #> CL:0000451                            dendritic cell  45   1 #> CL:0000623                       natural killer cell  35   3 #> CL:0000051                common lymphoid progenitor   6   5 #> CL:0000050   megakaryocyte-erythroid progenitor cell   2   4 #> CL:0000837 hematopoietic multipotent progenitor cell   2   4 #> CL:0000049                 common myeloid progenitor   2  11 #> CL:0000557      granulocyte monocyte progenitor cell   3   3 #> CL:0000037                   hematopoietic stem cell   7   6 #> CL:0000815                         regulatory T cell   6   1"},{"path":"https://github.com/vjcitn/ontoProc/reference/connect_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"connect ontological categories between related, annotated SummarizedExperiments — connect_classes","title":"connect ontological categories between related, annotated SummarizedExperiments — connect_classes","text":"connect ontological categories related, annotated SummarizedExperiments","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/connect_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"connect ontological categories between related, annotated SummarizedExperiments — connect_classes","text":"","code":"connect_classes(ont, se1, se2)"},{"path":"https://github.com/vjcitn/ontoProc/reference/connect_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"connect ontological categories between related, annotated SummarizedExperiments — connect_classes","text":"ont ontologyIndex ontology instance se1 SummarizedExperiment instance `label.ont` among colData columns se2 SummarizedExperiment instance `label.ont` among colData columns","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/connect_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"connect ontological categories between related, annotated SummarizedExperiments — connect_classes","text":"list two sublists mapping terms one SE descendant terms SE","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ctmarks.html","id":null,"dir":"Reference","previous_headings":"","what":"app to review molecular properties of cell types via cell ontology — ctmarks","title":"app to review molecular properties of cell types via cell ontology — ctmarks","text":"app review molecular properties cell types via cell ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ctmarks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"app to review molecular properties of cell types via cell ontology — ctmarks","text":"","code":"ctmarks(cl, pr, go)"},{"path":"https://github.com/vjcitn/ontoProc/reference/ctmarks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"app to review molecular properties of cell types via cell ontology — ctmarks","text":"cl import Cell Ontology (extended Cell Ontology) ontology_index form pr import Protein Ontology ontology_index form go import Gene Ontology ontology_index form","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ctmarks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"app to review molecular properties of cell types via cell ontology — ctmarks","text":"data.frame features selected cell types","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ctmarks.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"app to review molecular properties of cell types via cell ontology — ctmarks","text":"Prototype harvesting cell ontology searching has_part, has_plasma_membrane_part, intersection_of allied ontology relationships.  Uses shiny.  Can perform better getPROnto() getGeneOnto() values .GlobalEnv pr go respectively.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ctmarks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"app to review molecular properties of cell types via cell ontology — ctmarks","text":"","code":"if (interactive()) {    co = getOnto(\"cellOnto\", year_added=\"2023\")  # has plasma membrane relations    go = getOnto(\"goOnto\", \"2023\")    pr = getOnto(\"Pronto\", \"2021\") # peculiar tag used in legacy, would be PROnto with 2022    ctmarks(co, go, pr) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/cyclicSigset.html","id":null,"dir":"Reference","previous_headings":"","what":"as in Bakken et al. (2017 PMID 29322913) create gene signatures for k cell types, each of which fails to express all but one gene in a set of k genes — cyclicSigset","title":"as in Bakken et al. (2017 PMID 29322913) create gene signatures for k cell types, each of which fails to express all but one gene in a set of k genes — cyclicSigset","text":"Bakken et al. (2017 PMID 29322913) create gene signatures k cell types, fails express one gene set k genes","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cyclicSigset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as in Bakken et al. (2017 PMID 29322913) create gene signatures for k cell types, each of which fails to express all but one gene in a set of k genes — cyclicSigset","text":"","code":"cyclicSigset(   idvec,   conds = c(\"hasExp\", \"lacksExp\"),   tags = paste0(\"CL:X\", 1:length(idvec)) )"},{"path":"https://github.com/vjcitn/ontoProc/reference/cyclicSigset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as in Bakken et al. (2017 PMID 29322913) create gene signatures for k cell types, each of which fails to express all but one gene in a set of k genes — cyclicSigset","text":"idvec character vector identifiers, must names() set identify cells bearing genes conds character(2) tokens used indicate condition signature element contributes tags character vector cell-type identifiers; Cell Ontology use CL: prefix, one element element idvec","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cyclicSigset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"as in Bakken et al. (2017 PMID 29322913) create gene signatures for k cell types, each of which fails to express all but one gene in a set of k genes — cyclicSigset","text":"long data.frame","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/cyclicSigset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as in Bakken et al. (2017 PMID 29322913) create gene signatures for k cell types, each of which fails to express all but one gene in a set of k genes — cyclicSigset","text":"","code":"sigels = c(\"CL:X01\"=\"GRIK3\", \"CL:X02\"=\"NTNG1\", \"CL:X03\"=\"BAGE2\",          \"CL:X04\"=\"MC4R\", \"CL:X05\"=\"PAX6\", \"CL:X06\"=\"TSPAN12\", \"CL:X07\"=\"hSHISA8\",       \"CL:X08\"=\"SNCG\", \"CL:X09\"=\"ARHGEF28\", \"CL:X10\"=\"EGF\") sigdf = cyclicSigset(sigels) head(sigdf) #>       gene   type     cond #> 1 ARHGEF28 CL:X09   hasExp #> 2    GRIK3 CL:X09 lacksExp #> 3    NTNG1 CL:X09 lacksExp #> 4    BAGE2 CL:X09 lacksExp #> 5     MC4R CL:X09 lacksExp #> 6     PAX6 CL:X09 lacksExp"},{"path":"https://github.com/vjcitn/ontoProc/reference/demoApp.html","id":null,"dir":"Reference","previous_headings":"","what":"demonstrate the use of makeSelectInput — demoApp","title":"demonstrate the use of makeSelectInput — demoApp","text":"demonstrate use makeSelectInput","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/demoApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"demonstrate the use of makeSelectInput — demoApp","text":"","code":"demoApp()"},{"path":"https://github.com/vjcitn/ontoProc/reference/demoApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"demonstrate the use of makeSelectInput — demoApp","text":"Run side effect starting shiny app.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/demoApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"demonstrate the use of makeSelectInput — demoApp","text":"","code":"if (interactive()) { require(shiny) print(demoApp()) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/dropStop.html","id":null,"dir":"Reference","previous_headings":"","what":"dropStop is a utility for removing certain words from text data — dropStop","title":"dropStop is a utility for removing certain words from text data — dropStop","text":"dropStop utility removing certain words text data","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/dropStop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dropStop is a utility for removing certain words from text data — dropStop","text":"","code":"dropStop(x, drop, lower = TRUE, splitby = \" \")"},{"path":"https://github.com/vjcitn/ontoProc/reference/dropStop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dropStop is a utility for removing certain words from text data — dropStop","text":"x character vector strings cleaned drop character vector words scrub lower logical, TRUE, x converted tolower splitby character, used strsplit tokenize x","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/dropStop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dropStop is a utility for removing certain words from text data — dropStop","text":"list one element per input string, split \" \", elements drop removed","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/dropStop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dropStop is a utility for removing certain words from text data — dropStop","text":"","code":"data(minicorpus) minicorpus[1:3] #> [1] \"P493-6 treated with KJ-Pyr-9 and/or Doxycycline\"                                                               #> [2] \"Enhanced MyoD-Induced Transdifferentiation to a Myogenic Lineage by Fusion to a Potent Transactivation Domain\" #> [3] \"Osteosarcoma Genomics\"                                                                                         dropStop(minicorpus)[1:3] #> [[1]] #> [1] \"p493-6\"      \"treated\"     \"kj-pyr-9\"    \"and/or\"      \"doxycycline\" #>  #> [[2]] #> [1] \"enhanced\"             \"myod-induced\"         \"transdifferentiation\" #> [4] \"myogenic\"             \"lineage\"              \"fusion\"               #> [7] \"potent\"               \"transactivation\"      \"domain\"               #>  #> [[3]] #> [1] \"osteosarcoma\" \"genomics\"     #>"},{"path":"https://github.com/vjcitn/ontoProc/reference/fastGrep.html","id":null,"dir":"Reference","previous_headings":"","what":"some fields of interest are lists, and grep per se should not be used – this function checks and uses grep within vapply when appropriate — fastGrep","title":"some fields of interest are lists, and grep per se should not be used – this function checks and uses grep within vapply when appropriate — fastGrep","text":"fields interest lists, grep per se used – function checks uses grep within vapply appropriate","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/fastGrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"some fields of interest are lists, and grep per se should not be used – this function checks and uses grep within vapply when appropriate — fastGrep","text":"","code":"fastGrep(patt, onto, field, ...)"},{"path":"https://github.com/vjcitn/ontoProc/reference/fastGrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"some fields of interest are lists, and grep per se should not be used – this function checks and uses grep within vapply when appropriate — fastGrep","text":"patt regular expression whose presence field checked onto ontologyIndex instance field ontologyIndex component searched ... passed grep","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/fastGrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"some fields of interest are lists, and grep per se should not be used – this function checks and uses grep within vapply when appropriate — fastGrep","text":"logical vector indicating vector list elements match found","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/fastGrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"some fields of interest are lists, and grep per se should not be used – this function checks and uses grep within vapply when appropriate — fastGrep","text":"","code":"cheb = getOnto(\"chebi_lite\") #> loading from cache ind = fastGrep(\"tanespimycin\", cheb, \"name\") cheb$name[ind] #>    CHEBI:64153  #> \"tanespimycin\""},{"path":"https://github.com/vjcitn/ontoProc/reference/findCommonAncestors.html","id":null,"dir":"Reference","previous_headings":"","what":"Find common ancestors — findCommonAncestors","title":"Find common ancestors — findCommonAncestors","text":"Given set ontology terms, find latest common ancestors based term hierarchy.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/findCommonAncestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find common ancestors — findCommonAncestors","text":"","code":"findCommonAncestors(..., g, remove.self = TRUE, descriptions = NULL)"},{"path":"https://github.com/vjcitn/ontoProc/reference/findCommonAncestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find common ancestors — findCommonAncestors","text":"... One (possibly named) character vectors containing ontology terms. g graph object containing hierarchy ontology terms. remove.self Logical scalar indicating whether ignore ancestors containing single term (). descriptions Named character vector containing plain-English descriptions term. Names term identifier values descriptions.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/findCommonAncestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find common ancestors — findCommonAncestors","text":"DataFrame row corresponds common ancestor term. contains columns number, number descendent terms across vectors ...; descendents, List DataFrames containing identities descendents. may also contain column description, containing description term.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/findCommonAncestors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find common ancestors — findCommonAncestors","text":"function identifies terms g latest common ancestor (LCA) subset terms .... LCA one children exact set descendent terms ..., .e., specific term set observed descendents. Knowing LCA useful deciding terms rolled broader definitions downstream applications, usually exact terms ... specific practical use. descendents DataFrame row output describes descendents LCA, stratified presence absence entry .... particularly useful seeing different sets terms aggregated broader terms, e.g., harmonizing annotation different datasets studies. Note names ... reflected columns DataFrame LCA.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/findCommonAncestors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find common ancestors — findCommonAncestors","text":"Aaron Lun","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/findCommonAncestors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find common ancestors — findCommonAncestors","text":"","code":"co <- getOnto(\"cellOnto\") #> loading from cache  # TODO: wrap in utility function. parents <- co$parents self <- rep(names(parents), lengths(parents)) library(igraph) #>  #> Attaching package: ‘igraph’ #> The following object is masked from ‘package:IRanges’: #>  #>     union #> The following object is masked from ‘package:S4Vectors’: #>  #>     union #> The following objects are masked from ‘package:BiocGenerics’: #>  #>     normalize, path, union #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union g <- make_graph(rbind(unlist(parents), self))  # Selecting random terms: LCA <- ontoProc:::findCommonAncestors(A=sample(names(V(g)), 20),    B=sample(names(V(g)), 20), g=g) #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for DataFrameList objects is deprecated. Please use #>   ncols() on these objects instead.  LCA[1,] #> DataFrame with 1 row and 2 columns #>               number           descendents #>            <integer>       <DataFrameList> #> CL:0002076         2 TRUE:FALSE,FALSE:TRUE LCA[1,\"descendents\"][[1]] #> DataFrame with 2 rows and 2 columns #>                    A         B #>            <logical> <logical> #> CL:0002237      TRUE     FALSE #> CL:0002332     FALSE      TRUE"},{"path":"https://github.com/vjcitn/ontoProc/reference/getCellOnto.html","id":null,"dir":"Reference","previous_headings":"","what":"basic getters in old style, retained 2023 for deprecation interval — getChebiLite","title":"basic getters in old style, retained 2023 for deprecation interval — getChebiLite","text":"basic getters old style, retained 2023 deprecation interval","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/getCellOnto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"basic getters in old style, retained 2023 for deprecation interval — getChebiLite","text":"","code":"getChebiLite()  getCellosaurusOnto()  getUBERON_NE()  getChebiOnto()  getOncotreeOnto()  getDiseaseOnto()  getGeneOnto()  getHCAOnto()  getPROnto()  getPATOnto()  getMondoOnto()  getSIOOnto()"},{"path":"https://github.com/vjcitn/ontoProc/reference/getCellOnto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"basic getters in old style, retained 2023 for deprecation interval — getChebiLite","text":"instance ontology_index (S3) ontologyIndex","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/getCellOnto.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"basic getters in old style, retained 2023 for deprecation interval — getChebiLite","text":"getChebiOnto loads ontoRda/chebi_full.rda getOncotreeOnto loads ontoRda/oncotree.rda getDiseaseOnto loads ontoRda/diseaseOnto.rda getHCAOnto loads ontoRda/hcaOnto.rda produced hcao.owl https://github.com/HumanCellAtlas/ontology/releases/tag/1.0.6 2/11/2019, python pronto used convert OWL OBO. getPROnto loads ontoRda/PRonto.rda, produced http://purl.obolibrary.org/obo/pr.obo 'reasoned' ontology OBO foundry, 02-08-2019. contrast ontologies, imported via get_OBO `extract_tags='minimal'`. getPATOnto loads ontoRda/patoOnto.rda, produced https://raw.githubusercontent.com/pato-ontology/pato/master/pato.obo OBO foundry, 02-08-2019.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/getLeavesFromTerm.html","id":null,"dir":"Reference","previous_headings":"","what":"obtain childless descendents of a term (including query) — getLeavesFromTerm","title":"obtain childless descendents of a term (including query) — getLeavesFromTerm","text":"obtain childless descendents term (including query)","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/getLeavesFromTerm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obtain childless descendents of a term (including query) — getLeavesFromTerm","text":"","code":"getLeavesFromTerm(x, ont)"},{"path":"https://github.com/vjcitn/ontoProc/reference/getLeavesFromTerm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"obtain childless descendents of a term (including query) — getLeavesFromTerm","text":"x character(1) id element ontology_index instance ont ontology_index instance defined ontologyIndex package","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/getLeavesFromTerm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obtain childless descendents of a term (including query) — getLeavesFromTerm","text":"character vector 'leaves' ontology tree","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/getLeavesFromTerm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obtain childless descendents of a term (including query) — getLeavesFromTerm","text":"","code":"ch = getOnto(\"chebi_lite\") #> loading from cache alldr = getLeavesFromTerm(\"CHEBI:23888\", ch) head(ch$name[alldr[1:15]]) #>               CHEBI:86327               CHEBI:35705               CHEBI:50847  #>         \"antifungal drug\" \"immunosuppressive agent\"  \"immunological adjuvant\"  #>               CHEBI:88188               CHEBI:35481               CHEBI:35482  #>           \"drug allergen\"  \"non-narcotic analgesic\"        \"opioid analgesic\""},{"path":"https://github.com/vjcitn/ontoProc/reference/getOnto.html","id":null,"dir":"Reference","previous_headings":"","what":"get the ontology based on a short tag and year — getOnto","title":"get the ontology based on a short tag and year — getOnto","text":"get ontology based short tag year","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/getOnto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the ontology based on a short tag and year — getOnto","text":"","code":"getOnto(ontoname = \"cellOnto\", year_added = \"2023\")"},{"path":"https://github.com/vjcitn/ontoProc/reference/getOnto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the ontology based on a short tag and year — getOnto","text":"ontoname character(1) must element `valid_ontonames()` year_added character(1) refers `rdatadateadded` AnnotationHub metadata","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/getOnto.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"get the ontology based on a short tag and year — getOnto","text":"queries AnnotationHub \"ontoProcData\" filters find AnnotationHub accession number retrieves ontologyIndex serialization associated OBO representation ontology.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/getOnto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get the ontology based on a short tag and year — getOnto","text":"","code":"co = getOnto() #> loading from cache tail(co$name[1000:1500]) #>                                  CL:0000832  #>                   \"eosinophilic myeloblast\"  #>                                  CL:0000833  #>                 \"eosinophilic promyelocyte\"  #>                                  CL:0000834  #>                \"neutrophil progenitor cell\"  #>                                  CL:0000835  #>                                \"myeloblast\"  #>                                  CL:0000836  #>                              \"promyelocyte\"  #>                                  CL:0000837  #> \"hematopoietic multipotent progenitor cell\""},{"path":"https://github.com/vjcitn/ontoProc/reference/get_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"return a generator with ontology classes — get_classes","title":"return a generator with ontology classes — get_classes","text":"return generator ontology classes","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/get_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return a generator with ontology classes — get_classes","text":"","code":"get_classes(owlfile)"},{"path":"https://github.com/vjcitn/ontoProc/reference/get_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return a generator with ontology classes — get_classes","text":"owlfile reference OWL file, can URL, processed owlready2.get_ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/get_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return a generator with ontology classes — get_classes","text":"generator output classes() loaded ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/get_ordo_owl_path.html","id":null,"dir":"Reference","previous_headings":"","what":"decompress ordo owl file — get_ordo_owl_path","title":"decompress ordo owl file — get_ordo_owl_path","text":"decompress ordo owl file","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/get_ordo_owl_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"decompress ordo owl file — get_ordo_owl_path","text":"","code":"get_ordo_owl_path(target = tempdir())"},{"path":"https://github.com/vjcitn/ontoProc/reference/get_ordo_owl_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"decompress ordo owl file — get_ordo_owl_path","text":"target character(1) path decompressed owl live","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/humrna.html","id":null,"dir":"Reference","previous_headings":"","what":"humrna: a data.frame of SRA metadata related to RNA-seq in humans — humrna","title":"humrna: a data.frame of SRA metadata related to RNA-seq in humans — humrna","text":"humrna: data.frame SRA metadata related RNA-seq humans","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/humrna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"humrna: a data.frame of SRA metadata related to RNA-seq in humans — humrna","text":"","code":"humrna"},{"path":"https://github.com/vjcitn/ontoProc/reference/humrna.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"humrna: a data.frame of SRA metadata related to RNA-seq in humans — humrna","text":"data.frame","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/humrna.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"humrna: a data.frame of SRA metadata related to RNA-seq in humans — humrna","text":"NCBI SRA","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/humrna.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"humrna: a data.frame of SRA metadata related to RNA-seq in humans — humrna","text":"arbitrarily chosen RNA-seq studies taxon 9606","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/humrna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"humrna: a data.frame of SRA metadata related to RNA-seq in humans — humrna","text":"","code":"data(humrna) names(humrna) #>  [1] \"taxon_id\"             \"library_source\"       \"study_accession\"      #>  [4] \"sample_accession\"     \"experiment_accession\" \"run_accession\"        #>  [7] \"run_center_name\"      \"machine_type\"         \"paired_end\"           #> [10] \"study_title\"          \"study_abstract\"       \"study_primary_id\"     head(humrna[,1:5]) #>   taxon_id library_source study_accession sample_accession experiment_accession #> 1     9606 TRANSCRIPTOMIC       DRP000042        DRS000065            DRX000066 #> 2     9606 TRANSCRIPTOMIC       DRP000043        DRS000066            DRX000067 #> 3     9606 TRANSCRIPTOMIC       DRP000178        DRS000240            DRX000240 #> 4     9606 TRANSCRIPTOMIC       ERP013561       ERS1015600           ERX1263643 #> 5     9606 TRANSCRIPTOMIC       ERP013561       ERS1015603           ERX1263646 #> 6     9606 TRANSCRIPTOMIC       ERP013561       ERS1015601           ERX1263644"},{"path":"https://github.com/vjcitn/ontoProc/reference/improveNodes.html","id":null,"dir":"Reference","previous_headings":"","what":"inject linefeeds for node names for graph, with textual annotation from ontology — improveNodes","title":"inject linefeeds for node names for graph, with textual annotation from ontology — improveNodes","text":"inject linefeeds node names graph, textual annotation ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/improveNodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inject linefeeds for node names for graph, with textual annotation from ontology — improveNodes","text":"","code":"improveNodes(g, ont)"},{"path":"https://github.com/vjcitn/ontoProc/reference/improveNodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inject linefeeds for node names for graph, with textual annotation from ontology — improveNodes","text":"g graphNEL instance ont instance ontology ontologyIndex","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/labels.owlents.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve labels with names — labels.owlents","title":"retrieve labels with names — labels.owlents","text":"retrieve labels names","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/labels.owlents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve labels with names — labels.owlents","text":"","code":"# S3 method for class 'owlents' labels(object, ...)"},{"path":"https://github.com/vjcitn/ontoProc/reference/labels.owlents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve labels with names — labels.owlents","text":"object owlents instance ... used","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/labels.owlents.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"retrieve labels with names — labels.owlents","text":"multiple labels present, first silently returned.  Note reticulate 1.35.0 made change appears imply `[0]` can used retrieve desired components. get ontology tags, use `names(labels(...))`.  Note: function revised Jul 12 2024 allow terms lack labels (like CHEBI references cl.owl) processed, returning NA. previous functionality failed available, exported, labelsOLD.owlents.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/labels.owlents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve labels with names — labels.owlents","text":"","code":"clont_path = owl2cache(url=\"http://purl.obolibrary.org/obo/cl.owl\") #> resource BFC1045 already in cache from http://purl.obolibrary.org/obo/cl.owl o2 = try(reticulate::import(\"owlready2\"), silent=TRUE) if (!inherits(o2, \"try-error\")) {  clont = setup_entities(clont_path)  labels(clont[1:5])  labels(clont[51:55]) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/ldfToTerms.html","id":null,"dir":"Reference","previous_headings":"","what":"use output of cyclicSigset to generate a series of character vectors constituting OBO terms — ldfToTerms","title":"use output of cyclicSigset to generate a series of character vectors constituting OBO terms — ldfToTerms","text":"use output cyclicSigset generate series character vectors constituting OBO terms","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ldfToTerms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use output of cyclicSigset to generate a series of character vectors constituting OBO terms — ldfToTerms","text":"","code":"ldfToTerms(   ldf,   propmap,   sigels,   prologMaker = function(id, ...) sprintf(\"id: %s\", id) )"},{"path":"https://github.com/vjcitn/ontoProc/reference/ldfToTerms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use output of cyclicSigset to generate a series of character vectors constituting OBO terms — ldfToTerms","text":"ldf 'long format' data.frame created cyclicSigset propmap character vector names elements corresponding 'abbreviated' relationship tokens element values corresponding full relationship-naming strings sigels named character vector associating cell types (names) genes expressed cyclic set, one element per type prologMaker function arguments (id, ...), id character(1), generates vector strings used cell type-specific term.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ldfToTerms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"use output of cyclicSigset to generate a series of character vectors constituting OBO terms — ldfToTerms","text":"character vector, strings can concatenated OBO","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ldfToTerms.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"use output of cyclicSigset to generate a series of character vectors constituting OBO terms — ldfToTerms","text":"ldfToTerms sufficiently general produce terms reasonably populated long data frame/propmap combination, working example cyclic set context.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/ldfToTerms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"use output of cyclicSigset to generate a series of character vectors constituting OBO terms — ldfToTerms","text":"","code":"# a set of cell types -- names are cell type token, values are genes expressed in a # cyclic set -- each cell type expresses exactly one gene in the set and fails to # express all the other genes in the set.  See Figs 3 and 4 of Bakken et al [PMID 29322913]. sigels = c(\"CL:X01\"=\"GRIK3\", \"CL:X02\"=\"NTNG1\", \"CL:X03\"=\"BAGE2\",          \"CL:X04\"=\"MC4R\", \"CL:X05\"=\"PAX6\", \"CL:X06\"=\"TSPAN12\", \"CL:X07\"=\"hSHISA8\",          \"CL:X08\"=\"SNCG\", \"CL:X09\"=\"ARHGEF28\", \"CL:X10\"=\"EGF\") # create the associated long data frame ldf = cyclicSigset(sigels) # describe the abbreviations pmap = c(\"hasExp\"=\"has_expression_of\", lacksExp=\"lacks_expression_of\")  # now define the prolog for each cell type makeIntnProlog = function(id, ...) { # make type-specific prologs as key-value pairs     c(       sprintf(\"id: %s\", id),       sprintf(\"name: %s-expressing cortical layer 1 interneuron, human\", ...),       sprintf(\"def: '%s-expressing cortical layer 1 interneuron, human described via RNA-seq observations' [PMID 29322913]\", ...),       \"is_a: CL:0000099 ! interneuron\",       \"intersection_of: CL:0000099 ! interneuron\") } tms = ldfToTerms(ldf, pmap, sigels, makeIntnProlog) cat(tms[[1]], sep=\"\\n\") #> [Term] #> id: CL:X01 #> name: GRIK3-expressing cortical layer 1 interneuron, human #> def: 'GRIK3-expressing cortical layer 1 interneuron, human described via RNA-seq observations' [PMID 29322913] #> is_a: CL:0000099 ! interneuron #> intersection_of: CL:0000099 ! interneuron #> has_expression_of: PR:000008242 ! GRIK3 #> lacks_expression_of: PR:000011467 ! NTNG1 #> lacks_expression_of: PR:000004625 ! BAGE2 #> lacks_expression_of: PR:000001237 ! MC4R #> lacks_expression_of: PR:000012318 ! PAX6 #> lacks_expression_of: PR:000016738 ! TSPAN12 #> lacks_expression_of: PR:B8ZZ34 ! hSHISA8 #> lacks_expression_of: PR:000015325 ! SNCG #> lacks_expression_of: PR:000013942 ! ARHGEF28 #> lacks_expression_of: PR:000006928 ! EGF"},{"path":"https://github.com/vjcitn/ontoProc/reference/liberalMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a data.frame with a set of naive terms mapped to all matching ontology ids and their formal terms — liberalMap","title":"Produce a data.frame with a set of naive terms mapped to all matching ontology ids and their formal terms — liberalMap","text":"Produce data.frame set naive terms mapped matching ontology ids formal terms","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/liberalMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a data.frame with a set of naive terms mapped to all matching ontology ids and their formal terms — liberalMap","text":"","code":"liberalMap(terms, onto, useAgrep = FALSE, ...)"},{"path":"https://github.com/vjcitn/ontoProc/reference/liberalMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a data.frame with a set of naive terms mapped to all matching ontology ids and their formal terms — liberalMap","text":"terms character() vector, can use grep-compatible regular expressions onto instance ontologyIndex::ontology_index useAgrep logical(1) TRUE, agrep used ... passed agrep used","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/liberalMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a data.frame with a set of naive terms mapped to all matching ontology ids and their formal terms — liberalMap","text":"data.frame","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/liberalMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a data.frame with a set of naive terms mapped to all matching ontology ids and their formal terms — liberalMap","text":"","code":"cands = c(\"astrocyte$\", \"oligodendrocyte\", \"oligodendrocyte precursor\",    \"neoplastic\", \"^neuron$\", \"^vascular\", \"badterm\") #co = ontoProc::getCellOnto() co = getOnto(\"cellOnto\", year_added=\"2023\") #> loading from cache liberalMap(cands, co) #>              input         ontoid #> 1       astrocyte$     CL:0000127 #> 2       astrocyte$     CL:0002604 #> 3       astrocyte$     CL:0002626 #> 4       astrocyte$     CL:0002627 #> 5  oligodendrocyte     CL:0000128 #> 6  oligodendrocyte     CL:0002453 #> 7  oligodendrocyte     CL:2000025 #> 8  oligodendrocyte     CL:4023059 #> 9  oligodendrocyte     GO:0014003 #> 10 oligodendrocyte     GO:0022032 #> 11 oligodendrocyte     GO:0048709 #> 12 oligodendrocyte     GO:0048713 #> 13 oligodendrocyte     GO:0048714 #> 14 oligodendrocyte     GO:0048715 #> 15 oligodendrocyte     GO:0070444 #> 16 oligodendrocyte     GO:0070445 #> 17 oligodendrocyte     GO:0070446 #> 18 oligodendrocyte     GO:0070447 #> 19 oligodendrocyte     GO:0097252 #> 20 oligodendrocyte     GO:1900141 #> 21 oligodendrocyte     GO:1900142 #> 22 oligodendrocyte     GO:1900143 #> 25      neoplastic    CHEBI:35610 #> 26      neoplastic     CL:0001063 #> 27      neoplastic   PATO:0002011 #> 28      neoplastic   PATO:0002097 #> 29        ^neuron$     CL:0000540 #> 30       ^vascular     CL:0000359 #> 31       ^vascular     CL:0005022 #> 32       ^vascular     CL:4023051 #> 33       ^vascular     CL:4023056 #> 34       ^vascular     GO:0003018 #> 35       ^vascular     GO:0005172 #> 36       ^vascular     GO:0010232 #> 37       ^vascular     GO:0035886 #> 38       ^vascular     GO:0043184 #> 39       ^vascular     GO:0072360 #> 40       ^vascular     GO:0097084 #> 41       ^vascular     GO:0101023 #> 42       ^vascular     GO:1904738 #> 43       ^vascular     GO:1905288 #> 44       ^vascular     GO:1990874 #> 45       ^vascular   PR:000001971 #> 46       ^vascular   PR:000002112 #> 47       ^vascular   PR:000048096 #> 48       ^vascular      PR:P35918 #> 49       ^vascular      PR:P35968 #> 50       ^vascular UBERON:0005629 #> 51       ^vascular UBERON:0006965 #> 52       ^vascular UBERON:0007798 #> 53       ^vascular UBERON:0009536 #> 54       ^vascular UBERON:0009537 #> 55         badterm        badterm #>                                                                                  term #> 1                                                                           astrocyte #> 2                                                               hippocampal astrocyte #> 3                                                                  immature astrocyte #> 4                                                                    mature astrocyte #> 5                                                                     oligodendrocyte #> 6                                                      oligodendrocyte precursor cell #> 7                                                         spinal cord oligodendrocyte #> 8                                 differentiation-committed oligodendrocyte precursor #> 9                                                         oligodendrocyte development #> 10                                       telencephalon oligodendrocyte cell migration #> 11                                                    oligodendrocyte differentiation #> 12                                      regulation of oligodendrocyte differentiation #> 13                             positive regulation of oligodendrocyte differentiation #> 14                             negative regulation of oligodendrocyte differentiation #> 15                                           oligodendrocyte progenitor proliferation #> 16                             regulation of oligodendrocyte progenitor proliferation #> 17                    negative regulation of oligodendrocyte progenitor proliferation #> 18                    positive regulation of oligodendrocyte progenitor proliferation #> 19                                                  oligodendrocyte apoptotic process #> 20                                    regulation of oligodendrocyte apoptotic process #> 21                           negative regulation of oligodendrocyte apoptotic process #> 22                           positive regulation of oligodendrocyte apoptotic process #> 25                                                               antineoplastic agent #> 26                                                                    neoplastic cell #> 27                                                                         neoplastic #> 28                                                              neoplastic, malignant #> 29                                                                             neuron #> 30                                             vascular associated smooth muscle cell #> 31                                                           vascular lymphangioblast #> 32                                                       vascular leptomeningeal cell #> 33                                                vascular leptomeningeal cell (Mmus) #> 34                                             vascular process in circulatory system #> 35                                vascular endothelial growth factor receptor binding #> 36                                                                 vascular transport #> 37                             vascular associated smooth muscle cell differentiation #> 38                              vascular endothelial growth factor receptor 2 binding #> 39                                                          vascular cord development #> 40                                 vascular associated smooth muscle cell development #> 41                                            vascular endothelial cell proliferation #> 42                                   vascular associated smooth muscle cell migration #> 43                           vascular associated smooth muscle cell apoptotic process #> 44                               vascular associated smooth muscle cell proliferation #> 45                                        vascular endothelial growth factor receptor #> 46                                      vascular endothelial growth factor receptor 2 #> 47 vascular endothelial growth factor receptor 2, signal peptide removed form (human) #> 48                              vascular endothelial growth factor receptor 2 (mouse) #> 49                              vascular endothelial growth factor receptor 2 (human) #> 50                                                                    vascular plexus #> 51                                                                      vascular cord #> 52                                                                    vascular system #> 53                                                      vascular element of left lung #> 54                                                     vascular element of right lung #> 55                                                                               <NA>"},{"path":"https://github.com/vjcitn/ontoProc/reference/makeSelectInput.html","id":null,"dir":"Reference","previous_headings":"","what":"generate a selectInput control for an ontologyIndex slice — makeSelectInput","title":"generate a selectInput control for an ontologyIndex slice — makeSelectInput","text":"generate selectInput control ontologyIndex slice","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/makeSelectInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate a selectInput control for an ontologyIndex slice — makeSelectInput","text":"","code":"makeSelectInput(   onto,   term,   type = \"siblings\",   inputId,   label,   multiple = TRUE,   ... )"},{"path":"https://github.com/vjcitn/ontoProc/reference/makeSelectInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate a selectInput control for an ontologyIndex slice — makeSelectInput","text":"onto ontologyIndex instance term character(1) term used basis term list option set control type character(1) 'siblings' 'children', relationship 'term' options satisfy inputId character(1) use server label character(1) labeling ui multiple logical(1) passed selectInput ... additional parameters passed selectInput","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/makeSelectInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate a selectInput control for an ontologyIndex slice — makeSelectInput","text":"selectInput control","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/makeSelectInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate a selectInput control for an ontologyIndex slice — makeSelectInput","text":"","code":"makeSelectInput #> function (onto, term, type = \"siblings\", inputId, label, multiple = TRUE,  #>     ...)  #> { #>     stopifnot(term %in% onto$name) #>     print(type) #>     stopifnot(type %in% c(\"siblings\", \"children\")) #>     ind = match(term, onto$name) #>     tag = onto$id[[ind]] #>     if (type == \"siblings\")  #>         tset = siblings_TAG(tag, onto) #>     else if (type == \"children\")  #>         tset = children_TAG(tag, onto) #>     selectInput(inputId, paste0(label, \": \", term, \" (\", type,  #>         \")\"), choices = unname(tset@cleanFrame$clean), multiple = multiple,  #>         ...) #> } #> <bytecode: 0x3012978c8> #> <environment: namespace:ontoProc>"},{"path":"https://github.com/vjcitn/ontoProc/reference/make_graphNEL_from_ontology_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"obtain graphNEL ontology_plot instance ontologyPlot","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/make_graphNEL_from_ontology_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"","code":"make_graphNEL_from_ontology_plot(x)"},{"path":"https://github.com/vjcitn/ontoProc/reference/make_graphNEL_from_ontology_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"x instance S3 class ontology_plot","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/make_graphNEL_from_ontology_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"instance S4 graphNEL class","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/make_graphNEL_from_ontology_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"","code":"requireNamespace(\"Rgraphviz\") requireNamespace(\"graph\") cl = getOnto(\"cellOnto\") #> loading from cache cl3k = c(\"CL:0000492\", \"CL:0001054\", \"CL:0000236\", \"CL:0000625\",    \"CL:0000576\", \"CL:0000623\", \"CL:0000451\", \"CL:0000556\") p3k = ontologyPlot::onto_plot(cl, cl3k) gnel = make_graphNEL_from_ontology_plot(p3k) gnel = improveNodes(gnel, cl) graph::graph.par(list(nodes=list(shape=\"plaintext\", cex=.8))) gnel = Rgraphviz::layoutGraph(gnel) Rgraphviz::renderGraph(gnel)"},{"path":"https://github.com/vjcitn/ontoProc/reference/map2prose.html","id":null,"dir":"Reference","previous_headings":"","what":"use prose terminology with output of connect_classes — map2prose","title":"use prose terminology with output of connect_classes — map2prose","text":"use prose terminology output connect_classes","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/map2prose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use prose terminology with output of connect_classes — map2prose","text":"","code":"map2prose(x, cl)"},{"path":"https://github.com/vjcitn/ontoProc/reference/map2prose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use prose terminology with output of connect_classes — map2prose","text":"x component connect_classes output cl ontologyIndex ontology instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/map2prose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"use prose terminology with output of connect_classes — map2prose","text":"decorated list","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/mapOneNaive.html","id":null,"dir":"Reference","previous_headings":"","what":"use grep or agrep to find a match for a naive token into ontology — mapOneNaive","title":"use grep or agrep to find a match for a naive token into ontology — mapOneNaive","text":"use grep agrep find match naive token ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/mapOneNaive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use grep or agrep to find a match for a naive token into ontology — mapOneNaive","text":"","code":"mapOneNaive(naive, onto, useAgrep = FALSE, ...)"},{"path":"https://github.com/vjcitn/ontoProc/reference/mapOneNaive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use grep or agrep to find a match for a naive token into ontology — mapOneNaive","text":"naive character(1) onto instance ontologyIndex::ontology_index useAgrep logical(1) TRUE, agrep used ... passed agrep used","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/mapOneNaive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"use grep or agrep to find a match for a naive token into ontology — mapOneNaive","text":"match found, result grep/agrep value=TRUE returned; otherwise named NA_character_ returned named vector, names ontology identifiers, values matched strings","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/mapOneNaive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"use grep or agrep to find a match for a naive token into ontology — mapOneNaive","text":"","code":"#co = ontoProc::getCellOnto() co = getOnto(\"cellOnto\", year_added=\"2023\") #> loading from cache mapOneNaive(\"astrocyte\", co) #>                                         CL:0000127  #>                                        \"astrocyte\"  #>                                         CL:0002603  #>                      \"astrocyte of the cerebellum\"  #>                                         CL:0002604  #>                            \"hippocampal astrocyte\"  #>                                         CL:0002605  #>                 \"astrocyte of the cerebral cortex\"  #>                                         CL:0002606  #>                     \"astrocyte of the spinal cord\"  #>                                         CL:0002626  #>                               \"immature astrocyte\"  #>                                         CL:0002627  #>                                 \"mature astrocyte\"  #>                                         CL:0012000  #>                       \"astrocyte of the forebrain\"  #>                                         GO:0002265  #> \"astrocyte activation involved in immune response\"  #>                                         GO:0014002  #>                            \"astrocyte development\"  #>                                         GO:0021896  #>              \"forebrain astrocyte differentiation\"  #>                                         GO:0021897  #>                  \"forebrain astrocyte development\"  #>                                         GO:0022031  #>           \"telencephalon astrocyte cell migration\"  #>                                         GO:0035700  #>                             \"astrocyte chemotaxis\"  #>                                         GO:0036520  #>          \"astrocyte-dopaminergic neuron signaling\"  #>                                         GO:0043615  #>                         \"astrocyte cell migration\"  #>                                         GO:0048143  #>                             \"astrocyte activation\"  #>                                         GO:0048708  #>                        \"astrocyte differentiation\"  #>                                         GO:0048710  #>          \"regulation of astrocyte differentiation\"  #>                                         GO:0048711  #> \"positive regulation of astrocyte differentiation\"  #>                                         GO:0048712  #> \"negative regulation of astrocyte differentiation\"  #>                                         GO:0061888  #>               \"regulation of astrocyte activation\"  #>                                         GO:0061889  #>      \"negative regulation of astrocyte activation\"  #>                                         GO:0061890  #>      \"positive regulation of astrocyte activation\"  #>                                         GO:0097449  #>                             \"astrocyte projection\"  #>                                         GO:2000458  #>               \"regulation of astrocyte chemotaxis\"  #>                                         GO:2000459  #>      \"negative regulation of astrocyte chemotaxis\"  #>                                         GO:2000464  #>      \"positive regulation of astrocyte chemotaxis\""},{"path":"https://github.com/vjcitn/ontoProc/reference/minicorpus.html","id":null,"dir":"Reference","previous_headings":"","what":"minicorpus: a vector of annotation strings found in 'study title' of SRA metadata. — minicorpus","title":"minicorpus: a vector of annotation strings found in 'study title' of SRA metadata. — minicorpus","text":"minicorpus: vector annotation strings found 'study title' SRA metadata.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/minicorpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"minicorpus: a vector of annotation strings found in 'study title' of SRA metadata. — minicorpus","text":"","code":"minicorpus"},{"path":"https://github.com/vjcitn/ontoProc/reference/minicorpus.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"minicorpus: a vector of annotation strings found in 'study title' of SRA metadata. — minicorpus","text":"character vector","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/minicorpus.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"minicorpus: a vector of annotation strings found in 'study title' of SRA metadata. — minicorpus","text":"NCBI SRA","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/minicorpus.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"minicorpus: a vector of annotation strings found in 'study title' of SRA metadata. — minicorpus","text":"arbitrarily chosen titles RNA-seq studies taxon 9606","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/minicorpus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"minicorpus: a vector of annotation strings found in 'study title' of SRA metadata. — minicorpus","text":"","code":"data(minicorpus) head(minicorpus) #> [1] \"P493-6 treated with KJ-Pyr-9 and/or Doxycycline\"                                                               #> [2] \"Enhanced MyoD-Induced Transdifferentiation to a Myogenic Lineage by Fusion to a Potent Transactivation Domain\" #> [3] \"Osteosarcoma Genomics\"                                                                                         #> [4] \"Biochemical fractionation of HEK293 nuclei and RNA-seq of chromatin-associated and soluble-nuclear RNA\"        #> [5] \"Transcriptomic variation of pharmacogenes in multiple human tissues and lymphoblastoid cell lines\"             #> [6] \"Gene expression profiles in NORAD knockout and PUMILIO overexpressing cells\""},{"path":"https://github.com/vjcitn/ontoProc/reference/nomenCheckup.html","id":null,"dir":"Reference","previous_headings":"","what":"repair nomenclature mismatches (to curated term set) in a vector of terms — nomenCheckup","title":"repair nomenclature mismatches (to curated term set) in a vector of terms — nomenCheckup","text":"repair nomenclature mismatches (curated term set) vector terms","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/nomenCheckup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"repair nomenclature mismatches (to curated term set) in a vector of terms — nomenCheckup","text":"","code":"nomenCheckup(cand, namedOffic, n = 1, tagcolname = \"tag\", ...)"},{"path":"https://github.com/vjcitn/ontoProc/reference/nomenCheckup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"repair nomenclature mismatches (to curated term set) in a vector of terms — nomenCheckup","text":"cand character vector candidate terms namedOffic named character vector curated terms, names regarded tags, intended identifiers curated ontologies n numeric(1) number nearest neighbors return tagcolname character(1) prefix used name columns tags output ... passed adist","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/nomenCheckup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"repair nomenclature mismatches (to curated term set) in a vector of terms — nomenCheckup","text":"data.frame instance 2n+1 columns (column 1 candidate, remaining n pairs columns (term, tag) n nearest neighbors measured adist.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/nomenCheckup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"repair nomenclature mismatches (to curated term set) in a vector of terms — nomenCheckup","text":"","code":"candidates = c(\"JHH7\", \"HUT102\", \"HS739T\", \"NCIH716\") # the candidates are cell line names returned in the text dump from # https://portals.broadinstitute.org/ccle/page?gene=AHR # note that one must travel to the third nearest neighbor # to find the match (and tag) for Hs 739.T # in this example, we compare to cell line names in Cell Line Ontology nomenCheckup(candidates, cleanCLOnames(), n=3, tagcolname=\"clo\") #> loading from cache #>      cand     hit1        clo1     hit2        clo2     hit3        clo3 #> 1    JHH7    JHH-7 CLO:0009994     FH 7 CLO:0003207       HH CLO:0003744 #> 2  HUT102  HuT 102 CLO:0004303    FC102 CLO:0003020   HCC202 CLO:0003649 #> 3  HS739T   Hs 3.T CLO:0003921  Hs 39.T CLO:0003941 Hs 739.T CLO:0004087 #> 4 NCIH716 NCI-H716 CLO:0008108 NCI-H711 CLO:0008107 NCI-H719 CLO:0008109"},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"high-level use graph/Rgraphviz rendering ontology relations","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"","code":"onto_plot2(ont, terms2use, cex = 0.8, ...)"},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"ont instance ontology ontologyIndex terms2use character vector cex numeric(1) defaults .8, supplied Rgraphviz::graph.par ... passed onto_plot ontologyPlot","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"graphNEL instance (invisibly)","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_plot2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"","code":"cl = getOnto(\"cellOnto\") #> loading from cache cl3k = c(\"CL:0000492\", \"CL:0001054\", \"CL:0000236\", \"CL:0000625\",    \"CL:0000576\", \"CL:0000623\", \"CL:0000451\", \"CL:0000556\") onto_plot2(cl, cl3k)"},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_roots.html","id":null,"dir":"Reference","previous_headings":"","what":"list parentless nodes in ontology_index instance — onto_roots","title":"list parentless nodes in ontology_index instance — onto_roots","text":"list parentless nodes ontology_index instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_roots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list parentless nodes in ontology_index instance — onto_roots","text":"","code":"onto_roots(x)"},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_roots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list parentless nodes in ontology_index instance — onto_roots","text":"x ontology_index instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_roots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list parentless nodes in ontology_index instance — onto_roots","text":"report (produced cat()) root ids associated names","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/onto_roots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"list parentless nodes in ontology_index instance — onto_roots","text":"","code":"onto_roots #> function (x)  #> { #>     roots = x$id[sapply(x$parents, length) == 0] #>     show_roots <- roots[order(sapply(x$children[roots], length),  #>         decreasing = TRUE)] #>     cat(paste0(collapse = \"\", \"\\t\", show_roots, \" - \", x$name[show_roots],  #>         \"\\n\"), sep = \"\") #> } #> <bytecode: 0x1782630a8> #> <environment: namespace:ontoProc>"},{"path":"https://github.com/vjcitn/ontoProc/reference/owl2cache.html","id":null,"dir":"Reference","previous_headings":"","what":"cache an owl file accessible via URL — owl2cache","title":"cache an owl file accessible via URL — owl2cache","text":"cache owl file accessible via URL","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/owl2cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cache an owl file accessible via URL — owl2cache","text":"","code":"owl2cache(cache = BiocFileCache::BiocFileCache(), url)"},{"path":"https://github.com/vjcitn/ontoProc/reference/owl2cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cache an owl file accessible via URL — owl2cache","text":"cache BiocFileCache instance equivalent url character(1)","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/owl2cache.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"cache an owl file accessible via URL — owl2cache","text":"function check presence url cache using bfcquery; hit found, returns rpath associated last matching record.  etags can available use bfcneedsupdate.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/owl2cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cache an owl file accessible via URL — owl2cache","text":"","code":"ca = BiocFileCache::BiocFileCache() o2 = try(reticulate::import(\"owlready2\"), silent=TRUE) if (!inherits(o2, \"try-error\")) {  hppa = owl2cache(ca,      url=\"http://purl.obolibrary.org/obo/hp/releases/2023-10-09/hp-base.owl\")  setup_entities(hppa) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2019.html","id":null,"dir":"Reference","previous_headings":"","what":"packDesc2019: overview of ontoProc resources — packDesc2019","title":"packDesc2019: overview of ontoProc resources — packDesc2019","text":"packDesc2019: overview ontoProc resources","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2019.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"packDesc2019: overview of ontoProc resources — packDesc2019","text":"","code":"packDesc2019"},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2019.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"packDesc2019: overview of ontoProc resources — packDesc2019","text":"data.frame instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2019.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"packDesc2019: overview of ontoProc resources — packDesc2019","text":"Brief survey functions available load serialized ontology_index instances imported OBO.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2019.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"packDesc2019: overview of ontoProc resources — packDesc2019","text":"","code":"data(packDesc2019) head(packDesc2019) #>   X               func                          purpose nclass nprop nroots #> 1 1    getCellLineOnto                Cell line catalog  41780     6     18 #> 2 2        getCellOnto            Cell biology concepts   6708    59     38 #> 3 3 getCellosaurusOnto               Cell line concepts  87311     6  87311 #> 4 4       getChebiLite Chemicals of biological interest 108496     6     12 #> 5 5       getChebiOnto                                  108496    33     12 #> 6 6     getDiseaseOnto                    Human disease  11283    24     13 #>                 datav fmtv #> 1                <NA>   NA #> 2 releases/2018-07-07  1.2 #> 3                  23  1.2 #> 4                 155  1.2 #> 5                 155  1.2 #> 6 releases/2018-06-29  1.2"},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2021.html","id":null,"dir":"Reference","previous_headings":"","what":"packDesc2021: overview of ontoProc resources — packDesc2021","title":"packDesc2021: overview of ontoProc resources — packDesc2021","text":"packDesc2021: overview ontoProc resources","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"packDesc2021: overview of ontoProc resources — packDesc2021","text":"","code":"packDesc2021"},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2021.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"packDesc2021: overview of ontoProc resources — packDesc2021","text":"data.frame instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2021.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"packDesc2021: overview of ontoProc resources — packDesc2021","text":"Brief survey functions available load serialized ontology_index instances imported OBO.  Focus versions added 2021.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2021.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"packDesc2021: overview of ontoProc resources — packDesc2021","text":"","code":"data(packDesc2021) head(packDesc2021) #>              name nclass nprop nroots                  datav fmtv #> 1            caro     95    33     16 caro/2.0/beta/caro.owl  1.2 #> 2    cellLineOnto  39192    34    172                   <NA>  1.2 #> 3        cellOnto  10069   178     92    releases/2021-03-05  1.2 #> 4 cellosaurusOnto 126504    21 126504                   37.0  1.2 #> 5      chebi_full 137347    34     13                    197  1.2 #> 6      chebi_lite 137347    32     13                    197  1.2"},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2022.html","id":null,"dir":"Reference","previous_headings":"","what":"packDesc2022: overview of ontoProc resources — packDesc2022","title":"packDesc2022: overview of ontoProc resources — packDesc2022","text":"packDesc2022: overview ontoProc resources","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"packDesc2022: overview of ontoProc resources — packDesc2022","text":"","code":"packDesc2022"},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2022.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"packDesc2022: overview of ontoProc resources — packDesc2022","text":"data.frame instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2022.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"packDesc2022: overview of ontoProc resources — packDesc2022","text":"Brief survey functions available load serialized ontology_index instances imported OBO.  Focus versions added 2022.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2022.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"packDesc2022: overview of ontoProc resources — packDesc2022","text":"","code":"data(packDesc2022) head(packDesc2022) #>   X            name nclass nprop nroots                                  datav #> 1 1            caro    751    57     30 caro/releases/2022-02-18/caro-full.owl #> 2 2    cellLineOnto  43596   204    110                                   <NA> #> 3 3        cellOnto  17126   226    102                    releases/2022-08-16 #> 4 4 cellosaurusOnto 134841    21 134841                                   40.0 #> 5 5      chebi_full 162229    34     13                                    212 #> 6 6      chebi_lite 162229    32     13                                    212 #>   fmtv #> 1  1.2 #> 2  1.2 #> 3  1.2 #> 4  1.2 #> 5  1.2 #> 6  1.2"},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2023.html","id":null,"dir":"Reference","previous_headings":"","what":"packDesc2023: overview of ontoProc resources — packDesc2023","title":"packDesc2023: overview of ontoProc resources — packDesc2023","text":"packDesc2023: overview ontoProc resources","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2023.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"packDesc2023: overview of ontoProc resources — packDesc2023","text":"","code":"packDesc2023"},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2023.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"packDesc2023: overview of ontoProc resources — packDesc2023","text":"data.frame instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2023.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"packDesc2023: overview of ontoProc resources — packDesc2023","text":"Brief survey functions available load serialized ontology_index instances imported OBO.  Focus versions added 2023. Several manual interventions needed – cellosaurus large use script inst/scripts/desc.R, number ontologies 2023 versions.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/packDesc2023.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"packDesc2023: overview of ontoProc resources — packDesc2023","text":"","code":"data(packDesc2023) head(packDesc2023) #>   X         name nclass nprop nroots                                  datav #> 1 1         caro    751    57     30 caro/releases/2022-02-18/caro-full.owl #> 2 2 cellLineOnto  43596   204    110                                   <NA> #> 3 3     cellOnto  17371   229    102                    releases/2023-02-15 #> 4 4  cellosaurus 144570    NA 144571                                   44.0 #> 5 5   chebi_full 163735    34     13                                    218 #> 6 6   chebi_lite 163735    32     13                                    218 #>   fmtv #> 1  1.2 #> 2  1.2 #> 3  1.2 #> 4  1.2 #> 5  1.2 #> 6  1.2"},{"path":"https://github.com/vjcitn/ontoProc/reference/parents.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve is_a — parents","title":"retrieve is_a — parents","text":"retrieve is_a","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve is_a — parents","text":"","code":"parents(oe)"},{"path":"https://github.com/vjcitn/ontoProc/reference/parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve is_a — parents","text":"oe owlents instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve is_a — parents","text":"list vectors tags parents","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve is_a — parents","text":"","code":"pa = get_ordo_owl_path() o2 = try(reticulate::import(\"owlready2\"), silent=TRUE) if (!inherits(o2, \"try-error\")) {  orde = setup_entities(pa)  orde  parents(orde[1000:1001])  labels(orde[1000:1001]) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/plot.owlents.html","id":null,"dir":"Reference","previous_headings":"","what":"visualize ontology selection via onto_plot2, based on owlents — plot.owlents","title":"visualize ontology selection via onto_plot2, based on owlents — plot.owlents","text":"visualize ontology selection via onto_plot2, based owlents","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/plot.owlents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"visualize ontology selection via onto_plot2, based on owlents — plot.owlents","text":"","code":"plot.owlents(x, y, ..., dropThing = TRUE)"},{"path":"https://github.com/vjcitn/ontoProc/reference/plot.owlents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"visualize ontology selection via onto_plot2, based on owlents — plot.owlents","text":"x owlents instance y character() vector entries x$clnames ... passed onto_plot2 dropThing logical(1) defaults TRUE; \"Thing\" present terms display, removed","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/plot.owlents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"visualize ontology selection via onto_plot2, based on owlents — plot.owlents","text":"","code":"cl3k = c(\"CL:0000492\", \"CL:0001054\", \"CL:0000236\",    \"CL:0000625\", \"CL:0000576\",    \"CL:0000623\", \"CL:0000451\", \"CL:0000556\") cl3k = gsub(\":\", \"_\", cl3k) clont_path = owl2cache(url=\"http://purl.obolibrary.org/obo/cl.owl\") #> resource BFC1045 already in cache from http://purl.obolibrary.org/obo/cl.owl o2 = try(reticulate::import(\"owlready2\"), silent=TRUE) if (!inherits(o2, \"try-error\")) {  clont = setup_entities(clont_path)  plot(clont,cl3k) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/print.owlents.html","id":null,"dir":"Reference","previous_headings":"","what":"short printer — print.owlents","title":"short printer — print.owlents","text":"short printer","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/print.owlents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"short printer — print.owlents","text":"","code":"# S3 method for class 'owlents' print(x, ...)"},{"path":"https://github.com/vjcitn/ontoProc/reference/print.owlents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"short printer — print.owlents","text":"x owlents instance ... used","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/recognizedPredicates.html","id":null,"dir":"Reference","previous_headings":"","what":"enumerate ontological relationships used in ontoProc utilities — recognizedPredicates","title":"enumerate ontological relationships used in ontoProc utilities — recognizedPredicates","text":"enumerate ontological relationships used ontoProc utilities","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/recognizedPredicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"enumerate ontological relationships used in ontoProc utilities — recognizedPredicates","text":"","code":"recognizedPredicates()"},{"path":"https://github.com/vjcitn/ontoProc/reference/recognizedPredicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"enumerate ontological relationships used in ontoProc utilities — recognizedPredicates","text":"character vector, names elements abbreviated tokens may used code","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/recognizedPredicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"enumerate ontological relationships used in ontoProc utilities — recognizedPredicates","text":"","code":"head(recognizedPredicates()) #>                            hasPMP                          lacksPMP  #>        \"has_plasma_membrane_part\"      \"lacks_plasma_membrane_part\"  #>                           hiPMAmt                           loPMAmt  #> \"has_high_plasma_membrane_amount\"  \"has_low_plasma_membrane_amount\"  #>                           hasPart                         lacksPart  #>                        \"has_part\"                      \"lacks_part\""},{"path":"https://github.com/vjcitn/ontoProc/reference/search_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"use owlready2 ontology search facility on term labels — search_labels","title":"use owlready2 ontology search facility on term labels — search_labels","text":"use owlready2 ontology search facility term labels","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/search_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use owlready2 ontology search facility on term labels — search_labels","text":"","code":"search_labels(ontopath, regexp, case_sensitive = TRUE)"},{"path":"https://github.com/vjcitn/ontoProc/reference/search_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use owlready2 ontology search facility on term labels — search_labels","text":"ontopath character(1) path owl file regexp character(1) simple regular expression case_sensitive logical(1) case respected search?","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/search_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"use owlready2 ontology search facility on term labels — search_labels","text":"named list: term labels elements, tags names elements. return NULL nothing found.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/search_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"use owlready2 ontology search facility on term labels — search_labels","text":"","code":"pa = get_ordo_owl_path() ol = search_labels(pa, \"*Immunog*\") orde = setup_entities2(pa) onto_plot2(orde, names(ol))"},{"path":"https://github.com/vjcitn/ontoProc/reference/secLevGen.html","id":null,"dir":"Reference","previous_headings":"","what":"simple generation of children of 'choices' given as terms, returned as TermSet — secLevGen","title":"simple generation of children of 'choices' given as terms, returned as TermSet — secLevGen","text":"simple generation children 'choices' given terms, returned TermSet","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/secLevGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simple generation of children of 'choices' given as terms, returned as TermSet — secLevGen","text":"","code":"secLevGen(choices, ont)"},{"path":"https://github.com/vjcitn/ontoProc/reference/secLevGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simple generation of children of 'choices' given as terms, returned as TermSet — secLevGen","text":"choices vector terms ont instance ontology_index (S3) ontologyIndex package","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/secLevGen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simple generation of children of 'choices' given as terms, returned as TermSet — secLevGen","text":"TermSet instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/secLevGen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simple generation of children of 'choices' given as terms, returned as TermSet — secLevGen","text":"","code":"efoOnto = getOnto(\"efoOnto\") #> loading from cache secLevGen( \"disease\", efoOnto ) #> TermSet for 43 terms #> acute disease, animal disease, ..., urinary system disease, urogenital neoplasm"},{"path":"https://github.com/vjcitn/ontoProc/reference/selectFromMap.html","id":null,"dir":"Reference","previous_headings":"","what":"select a set of elements from a term 'map' and return a contribution to a data.frame — selectFromMap","title":"select a set of elements from a term 'map' and return a contribution to a data.frame — selectFromMap","text":"select set elements term 'map' return contribution data.frame","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/selectFromMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"select a set of elements from a term 'map' and return a contribution to a data.frame — selectFromMap","text":"","code":"selectFromMap(namedvec, index)"},{"path":"https://github.com/vjcitn/ontoProc/reference/selectFromMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"select a set of elements from a term 'map' and return a contribution to a data.frame — selectFromMap","text":"namedvec named character vector, returned mapOneNaive index numeric() integer(), typically length one","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/selectFromMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"select a set of elements from a term 'map' and return a contribution to a data.frame — selectFromMap","text":"data.frame; index inherit numeric, data.frame one row columns 'ontoid' 'term' populated NA_character_ returned, otherwise similarly named data.frame returned contents selected elements namedvec","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/selectFromMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"select a set of elements from a term 'map' and return a contribution to a data.frame — selectFromMap","text":"","code":"#co = ontoProc::getCellOnto() co = getOnto(\"cellOnto\", year_added=\"2023\") #> loading from cache mast = mapOneNaive(\"astrocyte\", co) selectFromMap(mast, 1) #>       ontoid      term #> 1 CL:0000127 astrocyte"},{"path":"https://github.com/vjcitn/ontoProc/reference/setup_entities.html","id":null,"dir":"Reference","previous_headings":"","what":"construct owlents instance from an owl file — setup_entities","title":"construct owlents instance from an owl file — setup_entities","text":"construct owlents instance owl file","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/setup_entities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"construct owlents instance from an owl file — setup_entities","text":"","code":"setup_entities(owlfn)"},{"path":"https://github.com/vjcitn/ontoProc/reference/setup_entities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"construct owlents instance from an owl file — setup_entities","text":"owlfn character(1) path valid owl ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/setup_entities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"construct owlents instance from an owl file — setup_entities","text":"instance owlents, list clnames ( vector term names form `[namespace]_[tag]`), allents (list python references owlready2 entities, can operated using owlready2.EntityClass methods), owlfn (filename), iri (IRI), call (record call producing entity.)","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/setup_entities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"construct owlents instance from an owl file — setup_entities","text":"","code":"pa = get_ordo_owl_path() o2 = try(reticulate::import(\"owlready2\"), silent=TRUE) if (!inherits(o2, \"try-error\")) {  orde = setup_entities(pa)  orde  ancestors(orde[1000:1001])  labels(orde[1000:1001]) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/setup_entities2.html","id":null,"dir":"Reference","previous_headings":"","what":"preparing for a small number of entry points to owlready2 mediated by basilisk, this setup function will ingest OWL, enumerate classes and their names, and produce the 'parents' list, which can then be used with ontology_index to produce a functional ontology representation — setup_entities2","title":"preparing for a small number of entry points to owlready2 mediated by basilisk, this setup function will ingest OWL, enumerate classes and their names, and produce the 'parents' list, which can then be used with ontology_index to produce a functional ontology representation — setup_entities2","text":"preparing small number entry points owlready2 mediated basilisk, setup function ingest OWL, enumerate classes names, produce 'parents' list, can used ontology_index produce functional ontology representation","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/setup_entities2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"preparing for a small number of entry points to owlready2 mediated by basilisk, this setup function will ingest OWL, enumerate classes and their names, and produce the 'parents' list, which can then be used with ontology_index to produce a functional ontology representation — setup_entities2","text":"","code":"setup_entities2(owlfn, cache_object = TRUE)"},{"path":"https://github.com/vjcitn/ontoProc/reference/setup_entities2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"preparing for a small number of entry points to owlready2 mediated by basilisk, this setup function will ingest OWL, enumerate classes and their names, and produce the 'parents' list, which can then be used with ontology_index to produce a functional ontology representation — setup_entities2","text":"owlfn character(1) path OWL file cache_object logical(1) TRUE, cache `ontology_index` instance BiocFileCache::BiocFileCache()","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/setup_entities2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"preparing for a small number of entry points to owlready2 mediated by basilisk, this setup function will ingest OWL, enumerate classes and their names, and produce the 'parents' list, which can then be used with ontology_index to produce a functional ontology representation — setup_entities2","text":"","code":"pa = get_ordo_owl_path() orde = setup_entities2(pa) orde #> Ontology with 15239 terms #>  #> Properties: #> \tid: character #> \tname: character #> \tparents: list #> \tchildren: list #> \tancestors: list #> \tobsolete: logical #> Roots: #> \tOrphanet_C010 - genetic material #> \tOrphanet_C001 - clinical entity #> \tOrphanet_C041 - inactive clinical entity #> \t4.0 - CC BY 4.0"},{"path":"https://github.com/vjcitn/ontoProc/reference/seur3kTab.html","id":null,"dir":"Reference","previous_headings":"","what":"tabulate the basic outcome of PBMC 3K tutorial of Seurat — seur3kTab","title":"tabulate the basic outcome of PBMC 3K tutorial of Seurat — seur3kTab","text":"tabulate basic outcome PBMC 3K tutorial Seurat","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/seur3kTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tabulate the basic outcome of PBMC 3K tutorial of Seurat — seur3kTab","text":"","code":"seur3kTab()"},{"path":"https://github.com/vjcitn/ontoProc/reference/seur3kTab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tabulate the basic outcome of PBMC 3K tutorial of Seurat — seur3kTab","text":"data.frame","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/seur3kTab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tabulate the basic outcome of PBMC 3K tutorial of Seurat — seur3kTab","text":"","code":"seur3kTab() #>   grp       markers       seurTutType                          formal #> 1   0          IL7R       CD4 T cells      CD4-positive helper T cell #> 2   1     CD14, LYZ   CD14+ Monocytes          CD14-positive monocyte #> 3   2         MS4A1           B cells                          B cell #> 4   3          CD8A       CD8 T cells CD8-positive, alpha-beta T cell #> 5   4 FCGR3A, MS4A7 FCGR3A+ Monocytes                        monocyte #> 6   5    GNLY, NKG7          NK cells             natural killer cell #> 7   6  FCER1A, CST3   Dendritic Cells                  dendritic cell #> 8   7          PPBP    Megakaryocytes                   megakaryocyte #>          tag #> 1 CL:0000492 #> 2 CL:0001054 #> 3 CL:0000236 #> 4 CL:0000625 #> 5 CL:0000576 #> 6 CL:0000623 #> 7 CL:0000451 #> 8 CL:0000556"},{"path":"https://github.com/vjcitn/ontoProc/reference/siblings_TAG.html","id":null,"dir":"Reference","previous_headings":"","what":"generate a TermSet with siblings of a given term, excluding that term by default — siblings_TAG","title":"generate a TermSet with siblings of a given term, excluding that term by default — siblings_TAG","text":"generate TermSet siblings given term, excluding term default acquire label ontology subject tag acquire labels children ontology subject tag","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/siblings_TAG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate a TermSet with siblings of a given term, excluding that term by default — siblings_TAG","text":"","code":"siblings_TAG(Tagstring = \"EFO:1001209\", ontology, justSibs = TRUE)  label_TAG(Tagstring = \"EFO:0000311\", ontology)  children_TAG(Tagstring = \"EFO:1001209\", ontology)"},{"path":"https://github.com/vjcitn/ontoProc/reference/siblings_TAG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate a TermSet with siblings of a given term, excluding that term by default — siblings_TAG","text":"Tagstring character(1) identifies term ontology instance ontology_index (S3) ontologyIndex justSibs character(1)","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/siblings_TAG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate a TermSet with siblings of a given term, excluding that term by default — siblings_TAG","text":"TermSet instance character(1) TermSet instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/siblings_TAG.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"generate a TermSet with siblings of a given term, excluding that term by default — siblings_TAG","text":"label_TAG, Tagstring may vector","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/siblings_TAG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate a TermSet with siblings of a given term, excluding that term by default — siblings_TAG","text":"","code":"efoOnto = getOnto(\"efoOnto\") #> loading from cache siblings_TAG( \"EFO:1001209\", efoOnto ) #> TermSet for 16 terms #> AA amyloidosis, AL amyloidosis, ..., systemic scleroderma, thromboangiitis obliterans  efoOnto = getOnto(\"efoOnto\") #> loading from cache label_TAG( \"EFO:0000311\", efoOnto ) #>       EFO:0000311  #> \"obsolete_cancer\"  efoOnto = getOnto(\"efoOnto\") #> loading from cache children_TAG( ontology = efoOnto ) #> TermSet for 0 terms #>"},{"path":"https://github.com/vjcitn/ontoProc/reference/stopWords.html","id":null,"dir":"Reference","previous_headings":"","what":"stopWords: vector of stop words from xpo6.com — stopWords","title":"stopWords: vector of stop words from xpo6.com — stopWords","text":"stopWords: vector stop words xpo6.com","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/stopWords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stopWords: vector of stop words from xpo6.com — stopWords","text":"","code":"stopWords"},{"path":"https://github.com/vjcitn/ontoProc/reference/stopWords.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"stopWords: vector of stop words from xpo6.com — stopWords","text":"character vector","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/stopWords.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"stopWords: vector of stop words from xpo6.com — stopWords","text":"http://xpo6.com/list--english-stop-words/","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/stopWords.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"stopWords: vector of stop words from xpo6.com — stopWords","text":"\"Stop words\" english words assumed contribute limited semantic value analysis free text.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/stopWords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"stopWords: vector of stop words from xpo6.com — stopWords","text":"","code":"data(stopWords) head(stopWords) #> [1] \"a\"      \"about\"  \"above\"  \"above\"  \"across\" \"after\""},{"path":"https://github.com/vjcitn/ontoProc/reference/sub-.owlents.html","id":null,"dir":"Reference","previous_headings":"","what":"subset method — [.owlents","title":"subset method — [.owlents","text":"subset method","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/sub-.owlents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subset method — [.owlents","text":"","code":"# S3 method for class 'owlents' x[i, j, drop = FALSE]"},{"path":"https://github.com/vjcitn/ontoProc/reference/sub-.owlents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subset method — [.owlents","text":"x owlents instance character numeric vector j used drop used","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/subclasses.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve subclass entities — subclasses","title":"retrieve subclass entities — subclasses","text":"retrieve subclass entities","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/subclasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve subclass entities — subclasses","text":"","code":"subclasses(oe)"},{"path":"https://github.com/vjcitn/ontoProc/reference/subclasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve subclass entities — subclasses","text":"oe owlents instance","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/subclasses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve subclass entities — subclasses","text":"","code":"pa = get_ordo_owl_path() o2 = try(reticulate::import(\"owlready2\"), silent=TRUE) if (!inherits(o2, \"try-error\")) {  orde = setup_entities(pa)  orde  sc <- subclasses(orde[1:5])  labels(orde[3])  o3 = reticulate::iterate(sc[[3]])  print(length(o3))  o3[[2]]  labels(orde[\"Orphanet_100011\"]) }"},{"path":"https://github.com/vjcitn/ontoProc/reference/subset_descendants.html","id":null,"dir":"Reference","previous_headings":"","what":"subset a SummarizedExperiment to which ontology tags have been bound using 'bind_formal_tags', obtaining the 'descendants' of the class of interest — subset_descendants","title":"subset a SummarizedExperiment to which ontology tags have been bound using 'bind_formal_tags', obtaining the 'descendants' of the class of interest — subset_descendants","text":"subset SummarizedExperiment ontology tags bound using 'bind_formal_tags', obtaining 'descendants' class interest","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/subset_descendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subset a SummarizedExperiment to which ontology tags have been bound using 'bind_formal_tags', obtaining the 'descendants' of the class of interest — subset_descendants","text":"","code":"subset_descendants(   se,   onto,   class_name,   class_tag,   formal_cd_name = \"label.ont\" )"},{"path":"https://github.com/vjcitn/ontoProc/reference/subset_descendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subset a SummarizedExperiment to which ontology tags have been bound using 'bind_formal_tags', obtaining the 'descendants' of the class of interest — subset_descendants","text":"se SummarizedExperiment instance onto representation ontology using representation ontologyIndex package class_name character(1) 'class_tag' missing, grepped onto[[\"name\"]] find class descendants class_tag character(1) used given identify \"ontological descendants\" term se formal_cd_name character(1) tells name used ontology tag column `colData(se)`","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/subset_descendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subset a SummarizedExperiment to which ontology tags have been bound using 'bind_formal_tags', obtaining the 'descendants' of the class of interest — subset_descendants","text":"instance SummarizedExperiment","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/sym2CellOnto.html","id":null,"dir":"Reference","previous_headings":"","what":"use Cell Ontology and Protein Ontology to identify cell-type defining conditions in which a given gene is named — sym2CellOnto","title":"use Cell Ontology and Protein Ontology to identify cell-type defining conditions in which a given gene is named — sym2CellOnto","text":"use Cell Ontology Protein Ontology identify cell-type defining conditions given gene named","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/sym2CellOnto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use Cell Ontology and Protein Ontology to identify cell-type defining conditions in which a given gene is named — sym2CellOnto","text":"","code":"sym2CellOnto(sym, cl, pr)"},{"path":"https://github.com/vjcitn/ontoProc/reference/sym2CellOnto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use Cell Ontology and Protein Ontology to identify cell-type defining conditions in which a given gene is named — sym2CellOnto","text":"sym gene symbol, must used protein ontology PRO:DNx exact match token cl result getOnto(\"cellOnto\") pr result getOnto(\"PROnto\")","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/sym2CellOnto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"use Cell Ontology and Protein Ontology to identify cell-type defining conditions in which a given gene is named — sym2CellOnto","text":"DataFrame hits found.  field 'cond' abbreviates identified conditions: (/lacks)PMP (plasma membrane part) (hi/lo)PMAmt (plasma membrane amount), (/lacks)Part.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/sym2CellOnto.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"use Cell Ontology and Protein Ontology to identify cell-type defining conditions in which a given gene is named — sym2CellOnto","text":"Currently just checks *plasma_membrane_part, *plasma_membrane_amount, *Part conditions.","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/sym2CellOnto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"use Cell Ontology and Protein Ontology to identify cell-type defining conditions in which a given gene is named — sym2CellOnto","text":"","code":"if (!exists(\"cl\")) cl = getOnto(\"cellOnto\") #> loading from cache if (!exists(\"pr\")) pr = getOnto(\"PROnto\") #> loading from cache sym2CellOnto(\"ITGAM\", cl, pr) #> DataFrame with 22 rows and 4 columns #>             sym        cond          cl                   type #>     <character> <character> <character>            <character> #> 1         ITGAM    lacksPMP  CL:0000037 hematopoietic stem c.. #> 2         ITGAM    lacksPMP  CL:0000547        proerythroblast #> 3         ITGAM    lacksPMP  CL:0000553 megakaryocyte progen.. #> 4         ITGAM    lacksPMP  CL:0000558           reticulocyte #> 5         ITGAM    lacksPMP  CL:0000611 eosinophil progenito.. #> ...         ...         ...         ...                    ... #> 18        ITGAM    lacksPMP  CL:0001060 hematopoietic oligop.. #> 19        ITGAM    lacksPMP  CL:0001066 erythroid progenitor.. #> 20        ITGAM    lacksPMP  CL:0002010 pre-conventional den.. #> 21        ITGAM    lacksPMP  CL:0002089 group 2 innate lymph.. #> 22        ITGAM    lacksPMP  CL:0002679 natural helper lymph.. sym2CellOnto(\"FOXP3\", cl, pr) #> DataFrame with 4 rows and 4 columns #>           sym        cond          cl                   type #>   <character> <character> <character>            <character> #> 1       FOXP3     hasPart  CL:0000902 induced T-regulatory.. #> 2       FOXP3     hasPart  CL:0000903 natural T-regulatory.. #> 3       FOXP3     hasPart  CL:0000919 CD8-positive, CD25-p.. #> 4       FOXP3     hasPart  CL:0000920 CD8-positive, CD28-n.."},{"path":"https://github.com/vjcitn/ontoProc/reference/url_ok.html","id":null,"dir":"Reference","previous_headings":"","what":"check that a URL can get a 200 for a HEAD request — url_ok","title":"check that a URL can get a 200 for a HEAD request — url_ok","text":"check URL can get 200 HEAD request","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/url_ok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check that a URL can get a 200 for a HEAD request — url_ok","text":"","code":"url_ok(url)"},{"path":"https://github.com/vjcitn/ontoProc/reference/url_ok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check that a URL can get a 200 for a HEAD request — url_ok","text":"url character(1)","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/url_ok.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check that a URL can get a 200 for a HEAD request — url_ok","text":"logical(1)","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/valid_ontonames.html","id":null,"dir":"Reference","previous_headings":"","what":"give a vector of valid 'names' of ontoProc ontologies — valid_ontonames","title":"give a vector of valid 'names' of ontoProc ontologies — valid_ontonames","text":"give vector valid 'names' ontoProc ontologies","code":""},{"path":"https://github.com/vjcitn/ontoProc/reference/valid_ontonames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"give a vector of valid 'names' of ontoProc ontologies — valid_ontonames","text":"","code":"valid_ontonames()"},{"path":"https://github.com/vjcitn/ontoProc/reference/valid_ontonames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"give a vector of valid 'names' of ontoProc ontologies — valid_ontonames","text":"","code":"head(valid_ontonames()) #> [1] \"caro\"            \"cellLineOnto\"    \"cellOnto\"        \"cellosaurusOnto\" #> [5] \"chebi_full\"      \"chebi_lite\""}]
